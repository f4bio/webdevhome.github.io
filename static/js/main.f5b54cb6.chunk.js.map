{"version":3,"sources":["components/MdiIcon.tsx","utils/jsx.ts","components/AppAction.tsx","stores/currentModeStore.ts","components/AppActions.tsx","components/AppContent.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/FooterDivider.tsx","components/FooterLink.tsx","components/FooterText.tsx","services/localStorageService.ts","stores/hiddenLinksStore.ts","utils/misc.ts","components/DefaultIcon.tsx","components/Link.tsx","components/LinkGroup.tsx","components/LinkList.tsx","links.ts","components/SearchTargetItem.tsx","components/Search.tsx","App.tsx","index.tsx"],"names":["MdiIcon","memo","className","path","color","Icon","style","width","height","classes","classesObject","result","Object","entries","push","join","AppMode","AppAction","icon","action","actionClasses","active","onClick","AppActions","children","AppContent","AppFooter","AppHeader","FooterDivider","FooterLink","text","url","href","FooterText","initialState","mode","default","currentModeStore","createStore","useCurrentMode","createReactHook","setMode","set","toggleMode","state","setHiddenLinks","values","storageString","JSON","stringify","localStorage","setItem","Error","links","key","getItem","storageValue","parse","Array","isArray","some","value","removeItem","getHiddenLinks","hiddenLinksStore","useHiddenLinks","mutations","link","concat","filter","it","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","title","searchable","customize","visible","focus","linkClasses","rel","event","preventDefault","includes","toggleLink","undefined","src","mdiEye","mdiEyeOff","LinkGroup","name","LinkList","hiddenLinks","map","group","items","every","SearchTargetItem","Search","latestKeypress","useState","keyboardIndex","setKeyboardIndex","searchTerm","setSearchTerm","searchTarget","setSearchTarget","inputElement","useRef","visibleLinks","flatMap","fuzzyOptions","useMemo","allowTypo","limit","results","fuzzy","go","focusedResult","useEffect","setTimeout","current","useSearch","window","addEventListener","handleGlobalKeyDown","removeEventListener","handleInputChange","useCallback","currentTarget","handleInputKeyDown","obj","searchUrl","focusedItem","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","total","hints","resultElements","ref","type","placeholder","onChange","onKeyDown","WebdevHome","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeMode","setLatestKeypress","handleGlobalKeypress","search","handleSearchAction","useSearchMode","bodyElement","globalThis","getElementsByTagName","getThemeStateSetting","themeState","setThemeState","themeSwitcherIcon","mdiWeatherSunny","mdiWeatherNight","mdiThemeLightDark","handleThemeSwitcherAction","useThemeSwitcher","mdiMagnify","mdiFormatListChecks","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f5b54cb6.chunk.js","sourcesContent":["import { Icon } from '@mdi/react'\nimport React, { FC, memo } from 'react'\n\ninterface MdiIconProps {\n  path: string\n  className?: string\n  color?: string\n}\n\nexport const MdiIcon: FC<MdiIconProps> = memo(({ className, path, color }) => {\n  const iconStyle = { width: 24, height: 24 }\n\n  return (\n    <Icon\n      className={className}\n      path={path}\n      style={iconStyle}\n      color={color}\n    />\n  )\n})\n","export function classes (classesObject: Record<string, boolean>): string {\n  const result: string[] = []\n\n  for (const [className, condition] of Object.entries(classesObject)) {\n    if (condition === true) {\n      result.push(className)\n    }\n  }\n\n  return result.join(' ')\n}\n","import React, { FC, memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\nimport { classes } from '../utils/jsx'\n\ninterface AppActionProps {\n  icon: string\n  active: boolean\n  action: () => void\n}\n\nexport const AppAction: FC<AppActionProps> = memo(({\n  icon, action, active\n}) => {\n  const actionClasses = {\n    'app-action': true,\n    'app-action--is-active': active\n  }\n\n  return (\n    <div className={classes(actionClasses)} onClick={action}>\n      <MdiIcon path={icon} />\n    </div>\n  )\n})\n","import { createStore, createReactHook } from '@alinnert/tstate'\n\nexport enum AppMode { 'default', 'search', 'customize' }\n\ninterface CurrentMode {\n  mode: AppMode\n}\n\nconst initialState: CurrentMode = {\n  mode: AppMode.default\n}\n\nconst currentModeStore = createStore<CurrentMode>(initialState)\nexport const useCurrentMode = createReactHook(currentModeStore)\n\nexport function setMode (mode: AppMode): void {\n  currentModeStore.set({ mode })\n}\n\nexport function toggleMode (mode: AppMode): void {\n  currentModeStore.set({\n    mode: currentModeStore.state.mode === mode ? AppMode.default : mode\n  })\n}\n","import React, { FC, memo } from 'react'\n\nexport const AppActions: FC = memo(({ children }) => {\n  return (\n    <div className=\"app-actions\">{children}</div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppContent: FC = memo(({ children }) => {\n  return (\n    <div className=\"app-content\">\n      {children}\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppFooter: FC = memo(({ children }) => {\n  return (\n    <div className=\"app-footer\">{children}</div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppHeader: FC = memo(() => {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header__logo logo\">\n        <span className=\"logo__shape\">&lt;</span>\n        <span className=\"logo__char-1\">Webdev</span>\n        <span className=\"logo__char-2\">Home</span>\n        <span className=\"logo__shape\"> /&gt;</span>\n      </div>\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const FooterDivider: FC = memo(() => {\n  return (\n    <div className=\"footer-divider\"></div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\ninterface FooterLinkProps {\n  text: string\n  url: string\n}\n\nexport const FooterLink: FC<FooterLinkProps> = memo(({ text, url }) => {\n  return (\n    <a href={url} className=\"footer-link\">{text}</a>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const FooterText: FC = memo(({ children }) => {\n  return (\n    <div className=\"footer-text\">\n      {children}\n    </div>\n  )\n})\n","import { ThemeState } from '../App'\n\ntype StorageKey = 'wdh:hidden-items' | 'sdh:theme-setting'\n\nexport function getHiddenLinks (): string[] {\n  const key: StorageKey = 'wdh:hidden-items'\n  const storageString = localStorage.getItem(key)\n\n  if (storageString === null) { return [] }\n\n  try {\n    const storageValue = JSON.parse(storageString)\n\n    if (!Array.isArray(storageValue)) {\n      localStorage.removeItem(key)\n      return []\n    }\n\n    if (storageValue.some(value => typeof value !== 'string')) {\n      localStorage.removeItem(key)\n      return []\n    }\n\n    return storageValue\n  } catch {\n    localStorage.removeItem(key)\n    return []\n  }\n}\n\nexport function setHiddenLinks (values: string[]): void {\n  const key: StorageKey = 'wdh:hidden-items'\n\n  try {\n    const storageString = JSON.stringify(values)\n    localStorage.setItem(key, storageString)\n  } catch {\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\n  }\n}\n\nexport function getThemeStateSetting (): ThemeState {\n  const key: StorageKey = 'sdh:theme-setting'\n  const storageString = localStorage.getItem(key)\n\n  if (storageString === null) { return 'auto' }\n  if (\n    storageString !== 'auto' &&\n    storageString !== 'light' &&\n    storageString !== 'dark'\n  ) { return 'auto' }\n\n  return storageString\n}\n\nexport function setThemeStateSetting (value: ThemeState): void {\n  const key: StorageKey = 'sdh:theme-setting'\n\n  localStorage.setItem(key, value)\n}\n","import { createReactHook, createStore } from '@alinnert/tstate'\nimport { getHiddenLinks, setHiddenLinks } from '../services/localStorageService'\n\n// #region store\nexport interface HiddenLinks {\n  links: string[]\n}\n\nconst initialState: HiddenLinks = {\n  links: getHiddenLinks()\n}\n\nconst hiddenLinksStore = createStore<HiddenLinks>(initialState)\nexport const useHiddenLinks = createReactHook(hiddenLinksStore)\n// #endregion store\n\n// #region mutations\nconst mutations = {\n  addUrl: (link: string): void => {\n    const links = hiddenLinksStore.state.links.concat(link)\n    hiddenLinksStore.set({ links })\n    setHiddenLinks(links)\n  },\n\n  removeUrl: (link: string): void => {\n    const links = hiddenLinksStore.state.links.filter(it => it !== link)\n    hiddenLinksStore.set({ links })\n    setHiddenLinks(links)\n  }\n}\n// #endregion mutations\n\n// #region actions\nexport function toggleLink (url: string): void {\n  if (hiddenLinksStore.state.links.includes(url)) {\n    mutations.removeUrl(url)\n  } else {\n    mutations.addUrl(url)\n  }\n}\n// #endregion actions\n","export function getIconUrl (icon: string): string {\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\n}\n","import { mdiLinkVariant } from '@mdi/js'\nimport React, { FC, memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\n\nexport const DefaultIcon: FC = memo(() => {\n  return (\n    <div className=\"default-icon\">\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\n    </div>\n  )\n})\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\nimport React, { FC, memo, MouseEvent } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { toggleLink } from '../stores/hiddenLinksStore'\nimport { classes } from '../utils/jsx'\nimport { getIconUrl } from '../utils/misc'\nimport { DefaultIcon } from './DefaultIcon'\nimport { MdiIcon } from './MdiIcon'\n\ninterface LinkProps {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  searchable?: boolean\n  customize?: boolean\n  visible?: boolean\n  focus?: boolean\n}\n\nexport const Link: FC<LinkProps> = memo(({\n  title, url, icon, color, searchable = false,\n  customize = false, visible = true, focus = false\n}) => {\n  function handleLinkClick (event: MouseEvent<HTMLAnchorElement>): void {\n    if (customize) {\n      event.preventDefault()\n      toggleLink(url)\n    }\n  }\n\n  const linkClasses = {\n    link: true,\n    'link--is-visible': visible,\n    'link--has-focus': focus\n  }\n\n  if (!customize && !visible) return null\n\n  return (\n    <a\n      href={url}\n      rel=\"noreferrer\"\n      className={classes(linkClasses)}\n      onClick={handleLinkClick}\n    >\n      <div className=\"link__icon-container\" style={{ color }}>\n        {icon !== undefined ? (\n          <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\n        ) : (\n          <DefaultIcon />\n        )}\n      </div>\n\n      <div className=\"link__label\">{title}</div>\n\n      {searchable ? (\n        <div className=\"link__info\">\n          <span className=\"link__info-text\">\n            <kbd>Tab</kbd>: Search on site\n          </span>\n        </div>\n      ) : null}\n\n      {customize ? (\n        <div className=\"link__action\">\n          <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\n        </div>\n      ) : null}\n    </a>\n  )\n})\n","import React, { FC, memo } from 'react'\n\ninterface LinkGroupProps {\n  name: string\n}\n\nexport const LinkGroup: FC<LinkGroupProps> = memo(({ children, name }) => {\n  return (\n    <div className=\"link-group\">\n      <div className=\"link-group__name\">{name}</div>\n      <div className=\"link-group__list\">\n        {children}\n      </div>\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\nimport { LinkGroup as ILinkGroup } from '../links'\nimport { AppMode, useCurrentMode } from '../stores/currentModeStore'\nimport { Link } from './Link'\nimport { LinkGroup } from './LinkGroup'\n\ninterface LinkListProps {\n  links: ILinkGroup[]\n  hiddenLinks: string[]\n}\n\nexport const LinkList: FC<LinkListProps> = memo(({ links, hiddenLinks }) => {\n  const { mode } = useCurrentMode()\n\n  function getLinkGroup (group: ILinkGroup): JSX.Element | null {\n    const noVisibleLinksInGroup = group.items\n      .every(link => hiddenLinks.includes(link.url))\n\n    if (noVisibleLinksInGroup && mode !== AppMode.customize) { return null }\n\n    return (\n      <LinkGroup key={group.name} name={group.name}>\n        {group.items.map(link => (\n          <Link\n            key={link.url}\n            title={link.title}\n            url={link.url}\n            icon={link.icon}\n            color={link.color}\n            customize={mode === AppMode.customize}\n            visible={!hiddenLinks.includes(link.url)}\n          />\n        ))}\n      </LinkGroup>\n    )\n  }\n\n  return <>{links.map(getLinkGroup)}</>\n})\n","import linksData from './links.json'\nimport { OptionalExceptFor } from './utilityTypes'\n\nexport interface LinkItem {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  iconComp?: JSX.Element\n  searchUrl?: string\n  searchConcat?: string\n}\n\nexport type SearchTarget =\n  OptionalExceptFor<LinkItem, 'title' | 'url' | 'searchUrl'>\n\nexport interface LinkGroup {\n  name: string\n  items: LinkItem[]\n}\n\nexport interface Links {\n  items: LinkGroup[]\n}\n\nexport const links: Links = {\n  items: linksData.items\n}\n\nexport function getAllLinks (): LinkItem[] {\n  return links.items.flatMap(group => group.items)\n}\n","import React, { FC, memo } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { LinkItem } from '../links'\nimport { getIconUrl } from '../utils/misc'\n\ninterface SearchTargetItemProps {\n  title: LinkItem['title']\n  icon: LinkItem['icon']\n  color: LinkItem['color']\n}\n\nexport const SearchTargetItem: FC<SearchTargetItemProps> = memo(\n  function SearchTargetItem ({ title, icon, color }) {\n    return (\n      <div className=\"search-target-item\">\n        Search on {icon !== undefined ? (\n          <span\n            className=\"search-target-item__icon-container\"\n            style={{ color }}\n          >\n            <ReactSVG\n              src={getIconUrl(icon)}\n              className=\"search-target-item__icon\"\n            />\n          </span>\n        ) : null} {title}:\n      </div>\n    )\n  }\n)\n","import fuzzy from 'fuzzysort'\nimport React, { ChangeEvent, Dispatch, FC, KeyboardEvent as ReactKeyboardEvent, memo, RefObject, SetStateAction, useEffect, useRef, useState, useCallback, useMemo } from 'react'\nimport { getAllLinks, LinkItem, SearchTarget } from '../links'\nimport { AppMode, setMode } from '../stores/currentModeStore'\nimport { useHiddenLinks } from '../stores/hiddenLinksStore'\nimport { Link } from './Link'\nimport { SearchTargetItem } from './SearchTargetItem'\n\ninterface SearchProps {\n  latestKeypress: string\n}\n\nexport const Search: FC<SearchProps> = memo(({ latestKeypress }) => {\n  const {\n    searchTerm, setSearchTerm,\n    searchTarget, setSearchTarget,\n    keyboardIndex, setKeyboardIndex,\n    results, focusedResult,\n    inputElement\n  } = useSearch(latestKeypress)\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  })\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void => {\n      setSearchTerm(event.currentTarget.value)\n      setKeyboardIndex(0)\n    },\n    [setKeyboardIndex, setSearchTerm]\n  )\n\n  const handleInputKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLInputElement>): void => {\n      switch (event.key) {\n        case 'Backspace': {\n          if (searchTerm !== '') { return }\n\n          if (searchTarget !== null) {\n            setSearchTarget(null)\n          } else {\n            setMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'Tab': {\n          event.preventDefault()\n\n          if (searchTarget !== null) { return }\n          if (focusedResult === null) { return }\n          if (focusedResult.obj.searchUrl === undefined) { return }\n\n          setSearchTarget(focusedResult.obj as SearchTarget)\n          setSearchTerm('')\n          break\n        }\n\n        case 'Enter': {\n          const url = getUrl(focusedResult?.obj ?? null, searchTarget, searchTerm)\n\n          if (url === null) { return }\n\n          if (event.ctrlKey) {\n            window.open(url, '', 'alwaysRaised=on')\n          } else {\n            window.location.href = url\n          }\n\n          if (event.ctrlKey || event.shiftKey) { setMode(AppMode.default) }\n          break\n        }\n\n        case 'ArrowUp': {\n          if (results === null) { return }\n          event.preventDefault()\n          setKeyboardIndex(Math.max(0, keyboardIndex - 1))\n          break\n        }\n\n        case 'ArrowDown': {\n          if (results === null) { return }\n          event.preventDefault()\n          setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\n        }\n      }\n    },\n    [focusedResult, keyboardIndex, results, searchTarget, searchTerm, setKeyboardIndex, setSearchTarget, setSearchTerm]\n  )\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (searchTarget !== null) {\n          setSearchTarget(null)\n          setSearchTerm('')\n          return\n        }\n\n        setMode(AppMode.default)\n      }\n    },\n    [searchTarget, setSearchTarget, setSearchTerm]\n  )\n\n  const hints = useMemo(\n    () => <>\n      <div className=\"search__results-hint\">\n      Type ahead to filter links.\n      </div>\n      <div className=\"search__results-hint\">\n        <kbd>Return</kbd>\n        <div className=\"search__results-hint-description\">\n        Open link\n        </div>\n      </div>\n      <div className=\"search__results-hint\">\n        <kbd>Ctrl</kbd> + <kbd>Return</kbd>\n        <div className=\"search__results-hint-description\">\n        Open link in a new tab (background)\n        </div>\n      </div>\n      <div className=\"search__results-hint\">\n        <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\n        <div className=\"search__results-hint-description\">\n        Open link in a new tab (foreground)\n        </div>\n      </div>\n    </>,\n    []\n  )\n\n  const resultElements = useMemo(\n    () => <>\n      {results !== null && results.total > 0 ? (\n        results.map(link => (\n          <Link\n            key={link.obj.url}\n            title={link.obj.title}\n            url={link.obj.url}\n            icon={link.obj.icon}\n            searchable={link.obj.searchUrl !== undefined}\n            color={link.obj.color}\n            customize={false}\n            visible={true}\n            focus={link === focusedResult}\n          />\n        ))\n      ) : (\n        <div className=\"search__results-hint\">No results found...</div>\n      )}\n    </>,\n    [focusedResult, results]\n  )\n\n  return (\n    <div className=\"search\">\n      {searchTarget !== null ? (\n        <SearchTargetItem\n          title={searchTarget.title}\n          icon={searchTarget.icon}\n          color={searchTarget.color}\n        />\n      ) : null}\n\n      <input\n        className=\"search__input\"\n        ref={inputElement}\n        type=\"text\"\n        value={searchTerm}\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\n        onChange={handleInputChange}\n        onKeyDown={handleInputKeyDown}\n      />\n\n      <div className=\"search__results\">\n        {searchTarget === null\n          ? (searchTerm === '' ? hints : resultElements)\n          : null\n        }\n      </div>\n    </div>\n  )\n})\n\ninterface UseSearch {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n  searchTarget: SearchTarget | null\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\n  keyboardIndex: number\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\n  results: Fuzzysort.KeyResults<LinkItem> | null\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\n  inputElement: RefObject<HTMLInputElement>\n}\n\nfunction useSearch (latestKeypress: string): UseSearch {\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\n  const inputElement = useRef<HTMLInputElement>(null)\n  const { links } = useHiddenLinks()\n  const visibleLinks = getAllLinks().filter(link => !links.includes(link.url))\n\n  const fuzzyOptions: Fuzzysort.KeyOptions = useMemo(\n    () => ({ key: 'title', allowTypo: false, limit: 6 }),\n    []\n  )\n\n  const results = useMemo(\n    () => searchTerm !== '' && searchTarget === null\n      ? fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\n      : null,\n    [fuzzyOptions, searchTarget, searchTerm, visibleLinks]\n  )\n\n  const focusedResult = useMemo(\n    () => results?.[keyboardIndex] ?? null,\n    [keyboardIndex, results]\n  )\n\n  useEffect(() => {\n    setSearchTerm(latestKeypress)\n    setTimeout(() => { inputElement.current?.focus() }, 0)\n  }, [latestKeypress])\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n    inputElement\n  }\n}\n\nfunction getUrl (\n  focusedItem: LinkItem | null,\n  searchTarget?: SearchTarget | null,\n  searchTerm?: string\n): string | null {\n  if (\n    searchTarget !== null &&\n    searchTarget !== undefined &&\n    searchTerm !== undefined &&\n    searchTerm !== ''\n  ) {\n    return searchTarget.searchUrl.replace(/\\{search\\}/, searchTerm)\n  }\n\n  if (focusedItem !== null) {\n    return focusedItem.url\n  }\n\n  return null\n}\n","import { mdiFormatListChecks, mdiMagnify, mdiThemeLightDark, mdiWeatherNight, mdiWeatherSunny } from '@mdi/js'\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react'\nimport { AppAction } from './components/AppAction'\nimport { AppActions } from './components/AppActions'\nimport { AppContent } from './components/AppContent'\nimport { AppFooter } from './components/AppFooter'\nimport { AppHeader } from './components/AppHeader'\nimport { FooterDivider } from './components/FooterDivider'\nimport { FooterLink } from './components/FooterLink'\nimport { FooterText } from './components/FooterText'\nimport { LinkList } from './components/LinkList'\nimport { Search } from './components/Search'\nimport { links } from './links'\nimport { AppMode, setMode, toggleMode, useCurrentMode } from './stores/currentModeStore'\nimport { HiddenLinks, useHiddenLinks } from './stores/hiddenLinksStore'\nimport { setThemeStateSetting, getThemeStateSetting } from './services/localStorageService'\n\nexport const WebdevHome: FC = () => {\n  const { mode } = useCurrentMode()\n  const { handleCustomizeAction, hiddenLinks } = useCustomizeMode()\n  const { handleSearchAction, latestKeypress } = useSearchMode()\n  const { themeSwitcherIcon, handleThemeSwitcherAction } = useThemeSwitcher()\n\n  return (\n    <div className=\"app\">\n      <AppHeader />\n\n      <AppActions>\n        <AppAction\n          icon={themeSwitcherIcon}\n          action={handleThemeSwitcherAction}\n          active={false}\n        />\n        <AppAction\n          icon={mdiMagnify}\n          action={handleSearchAction}\n          active={mode === AppMode.search}\n        />\n        <AppAction\n          icon={mdiFormatListChecks}\n          action={handleCustomizeAction}\n          active={mode === AppMode.customize}\n        />\n      </AppActions>\n\n      {mode === AppMode.default || mode === AppMode.customize ? (\n        <AppContent>\n          <LinkList links={links.items} hiddenLinks={hiddenLinks.links} />\n        </AppContent>\n      ) : (\n        <Search latestKeypress={latestKeypress} />\n      )}\n\n      <AppFooter>\n        <FooterText>\n          This list is curated by <a href=\"https://github.com/alinnert\">Andreas Linnert</a>\n        </FooterText>\n        <FooterLink\n          text=\"GitHub\"\n          url=\"https://github.com/webdevhome/webdevhome.github.io\"\n        />\n        <FooterDivider/>\n        <FooterText>Used icons:</FooterText>\n        <FooterLink\n          text=\"Material Design Icons\"\n          url=\"https://materialdesignicons.com\"\n        />\n        <FooterLink\n          text=\"Simple Icons\"\n          url=\"https://simpleicons.org/\"\n        />\n      </AppFooter>\n    </div>\n  )\n}\n\n// #region customize feature\ninterface UseCustomizeModeReturn {\n  hiddenLinks: HiddenLinks\n  handleCustomizeAction: () => void\n}\n\nfunction useCustomizeMode (): UseCustomizeModeReturn {\n  const hiddenLinks = useHiddenLinks()\n  const { mode } = useCurrentMode()\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGlobalKeydown)\n\n    function handleGlobalKeydown (event: KeyboardEvent): void {\n      if (event.key === 'Escape' && mode === AppMode.customize) {\n        setMode(AppMode.default)\n      }\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleGlobalKeydown)\n    }\n  }, [mode])\n\n  const handleCustomizeAction = useCallback(\n    (): void => { toggleMode(AppMode.customize) },\n    []\n  )\n\n  return { hiddenLinks, handleCustomizeAction }\n}\n// #endregion customize feature\n\n// #region search feature\ninterface UseSearchModeReturn {\n  handleSearchAction: () => void\n  latestKeypress: string\n}\n\nfunction useSearchMode (): UseSearchModeReturn {\n  const [latestKeypress, setLatestKeypress] = useState<string>('')\n  const { mode } = useCurrentMode()\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleGlobalKeypress)\n\n    function handleGlobalKeypress (event: KeyboardEvent): void {\n      if (mode === AppMode.default) {\n        if (event.key === '\\n') { return }\n        setLatestKeypress(event.key)\n        setMode(AppMode.search)\n      }\n    }\n\n    return (): void => {\n      window.removeEventListener('keypress', handleGlobalKeypress)\n    }\n  }, [mode])\n\n  const handleSearchAction = useCallback(\n    (): void => {\n      setLatestKeypress('')\n      toggleMode(AppMode.search)\n    },\n    []\n  )\n\n  return { handleSearchAction, latestKeypress }\n}\n// #endregion search feature\n\n// #region theme switcher\nexport const themeStates = ['auto', 'light', 'dark'] as const\nexport type ThemeState = typeof themeStates[number]\n\ninterface UseThemeSwitcherReturn {\n  themeSwitcherIcon: string\n  handleThemeSwitcherAction: () => void\n}\n\nfunction useThemeSwitcher (): UseThemeSwitcherReturn {\n  const bodyElement = globalThis.document.getElementsByTagName('body')[0]\n  const [themeState, setThemeState] =\n    useState<ThemeState>(getThemeStateSetting())\n\n  useEffect(\n    () => {\n      setThemeStateSetting(themeState)\n      bodyElement.className = `${themeState}-theme`\n    },\n    [bodyElement.className, themeState]\n  )\n\n  const themeSwitcherIcon = useMemo(\n    (): string => {\n      if (themeState === 'light') { return mdiWeatherSunny }\n      if (themeState === 'dark') { return mdiWeatherNight }\n      return mdiThemeLightDark\n    },\n    [themeState]\n  )\n\n  const handleThemeSwitcherAction = useCallback(\n    (): void => {\n      switch (themeState) {\n        case 'light':\n          setThemeState('dark')\n          break\n        case 'dark':\n          setThemeState('auto')\n          break\n        default:\n          setThemeState('light')\n          break\n      }\n    },\n    [themeState]\n  )\n\n  return { themeSwitcherIcon, handleThemeSwitcherAction }\n}\n// #endregion theme switcher\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { WebdevHome } from './App'\nimport './sass/index.scss'\n\nReactDOM.render(<WebdevHome />, document.getElementById('root'))\n"],"sourceRoot":""}