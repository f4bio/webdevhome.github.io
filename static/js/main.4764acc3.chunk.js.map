{"version":3,"sources":["components/Footer/AppFooter.tsx","components/Footer/FooterDivider.tsx","components/Footer/FooterGroup.tsx","components/Footer/FooterLink.tsx","utils/jsx.ts","contexts/currentModeContext.ts","components/Icon/MdiIcon.tsx","components/Header/AppAction.tsx","components/Header/AppActions.tsx","components/Header/Logo.tsx","components/Header/AppHeader.tsx","components/Layout/AppContent.tsx","services/localStorage/localStorageService.ts","services/localStorage/values/hiddenLinks.ts","services/localStorage/migrations/v1.ts","contexts/hiddenLinksContext.ts","utils/misc.ts","components/Icon/DefaultIcon.tsx","components/Links/Link.tsx","components/Links/LinkGroup.tsx","links.ts","components/Search/SearchTargetItem.tsx","components/Search/Search.tsx","App.tsx","services/localStorage/values/themeSetting.ts","index.tsx"],"names":["AppFooter","memo","children","className","FooterDivider","FooterGroup","title","FooterLink","text","url","href","classes","classesObject","result","Object","entries","push","join","AppMode","MdiIcon","path","color","Icon","style","width","height","AppAction","icon","action","active","actionClasses","useMemo","onClick","AppActions","Logo","AppHeader","AppContent","StorageKey","CurrentModeContext","createContext","getStorageValue","key","fallback","localStorage","getItem","setStorageValue","value","setItem","removeStorageValue","removeItem","saveHiddenLinks","values","storageString","JSON","stringify","hiddenItems","Error","storageVersion","themeSetting","migrateToV1","migrateLocalStorage","HiddenLinksContext","useHiddenLinksContextValue","useState","storageValue","parse","Array","isArray","some","loadHiddenLinks","hiddenLinks","setLinks","toggleLink","urlToToggle","newHiddenLinks","includes","filter","toggleGroup","state","urls","link","allLinksAreHidden","links","every","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","searchable","customize","visible","focus","hiddenLinksContext","useContext","handleLinkClick","useCallback","event","preventDefault","linkClasses","rel","undefined","src","mdiEye","mdiEyeOff","LinkGroup","group","currentModeContext","linkGroupClasses","items","allGroupLinksAreHidden","handleToggleGroupClick","newState","map","item","noVisibleLinksInGroup","isCurrentMode","name","mdiTableEyeOff","mdiTableEye","SearchTargetItem","getIcon","iconUrl","Search","searchTerm","setSearchTerm","keyboardIndex","setKeyboardIndex","searchTarget","setSearchTarget","visibleLinks","flatMap","fuzzyOptions","allowTypo","limit","results","fuzzy","go","focusedResult","useLayoutEffect","useSearch","useEffect","window","addEventListener","handleGlobalKeyDown","removeEventListener","handleInputChange","target","handleInputKeyDown","setCurrentMode","default","obj","searchUrl","focusedItem","concatChar","searchConcat","encodedSearchTerm","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","total","hints","resultElements","autoFocus","type","placeholder","onChange","onKeyDown","WebdevHome","currentModeContextValue","currentMode","toggleMode","mode","useCurrentModeContextValue","hiddenLinksContextValue","customizeMode","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeMode","searchMode","handleGlobalKeypress","search","handleSearchAction","useSearchMode","themeSwitcher","loadThemeSetting","themeState","setThemeState","bodyElement","globalThis","getElementsByTagName","mdiWeatherSunny","mdiWeatherNight","mdiThemeLightDark","switchTheme","useThemeSwitcher","Provider","mdiMagnify","mdiFormatListChecks","version","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4764acc3.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport './AppFooter.scss'\n\nexport const AppFooter = memo(function AppFooter({ children }) {\n  return <div className=\"app-footer\">{children}</div>\n})\n","import React, { memo } from 'react'\nimport './FooterDivider.scss'\n\nexport const FooterDivider = memo(function FooterDivider() {\n  return <div className=\"footer-divider\"></div>\n})\n","import React, { memo, ReactNode } from 'react'\nimport './FooterGroup.scss'\n\ninterface Props {\n  children?: ReactNode\n  title: string\n}\n\nexport const FooterGroup = memo<Props>(function FooterGroup({\n  children,\n  title,\n}) {\n  return (\n    <div className=\"footer-group\">\n      <div className=\"footer-group__title\">{title}</div>\n      {children}\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './FooterLink.scss'\n\ninterface Props {\n  text: string\n  url: string\n}\n\nexport const FooterLink = memo<Props>(function FooterLink({ text, url }) {\n  return (\n    <a href={url} className=\"footer-link\">\n      {text}\n    </a>\n  )\n})\n","export function classes(classesObject: Record<string, boolean>): string {\n  const result: string[] = []\n\n  for (const [className, condition] of Object.entries(classesObject)) {\n    if (condition === true) {\n      result.push(className)\n    }\n  }\n\n  return result.join(' ')\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react'\n\nexport enum AppMode {\n  default,\n  search,\n  customize,\n}\n\nexport interface CurrentModeContextValue {\n  currentMode: AppMode\n  setCurrentMode: Dispatch<SetStateAction<AppMode>>\n  toggleMode: (mode: AppMode) => void\n  isCurrentMode: (...mode: AppMode[]) => boolean\n}\n\nexport const CurrentModeContext = createContext<CurrentModeContextValue | null>(\n  null\n)\n\nexport function useCurrentModeContextValue(): CurrentModeContextValue {\n  const [currentMode, setCurrentMode] = useState<AppMode>(AppMode.default)\n\n  function toggleMode(mode: AppMode): void {\n    if (mode === currentMode) {\n      setCurrentMode(AppMode.default)\n    } else {\n      setCurrentMode(mode)\n    }\n  }\n\n  function isCurrentMode(...mode: AppMode[]): boolean {\n    return mode.includes(currentMode)\n  }\n\n  return {\n    currentMode,\n    setCurrentMode,\n    toggleMode,\n    isCurrentMode,\n  }\n}\n","import { Icon } from '@mdi/react'\nimport React, { memo } from 'react'\n\ninterface Props {\n  path: string\n  className?: string\n  color?: string\n}\n\nexport const MdiIcon = memo<Props>(function MdiIcon({ path, color }) {\n  return <Icon style={{ width: 24, height: 24 }} path={path} color={color} />\n})\n","import React, { memo, useMemo } from 'react'\nimport { classes } from '../../utils/jsx'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport './AppAction.scss'\n\ninterface Props {\n  icon: string\n  active: boolean\n  action: () => void\n}\n\nexport const AppAction = memo<Props>(function AppAction({\n  icon,\n  action,\n  active,\n}) {\n  const actionClasses = useMemo(\n    () => ({\n      'app-action': true,\n      'app-action--is-active': active,\n    }),\n    [active]\n  )\n\n  return (\n    <div className={classes(actionClasses)} onClick={action}>\n      <MdiIcon path={icon} />\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppActions.scss'\n\nexport const AppActions = memo(function AppActions({ children }) {\n  return <div className=\"app-actions\">{children}</div>\n})\n","import React, { memo } from 'react'\nimport './Logo.scss'\n\ninterface Props {}\n\nexport const Logo = memo<Props>(function Logo() {\n  return (\n    <div className=\"logo\">\n      <span className=\"logo__shape\">&lt;</span>\n      <span className=\"logo__char-1\">Webdev</span>\n      <span className=\"logo__char-2\">Home</span>\n      <span className=\"logo__shape\"> /&gt;</span>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppHeader.scss'\nimport { Logo } from './Logo'\n\nexport const AppHeader = memo(function AppHeader() {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header__logo\">\n        <Logo />\n      </div>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppContent.scss'\n\nexport const AppContent = memo(function AppContent({ children }) {\n  return <div className=\"app-content\">{children}</div>\n})\n","import { migrateToV1 } from './migrations/v1'\n\nexport enum StorageKey {\n  storageVersion = 'wdh:storage-version',\n  hiddenItems = 'wdh:hidden-items',\n  themeSetting = 'wdh:theme-setting',\n}\n\nexport function getStorageValue(key: StorageKey): string | null\nexport function getStorageValue(key: StorageKey, fallback: string): string\nexport function getStorageValue(\n  key: StorageKey,\n  fallback?: string\n): string | null {\n  return localStorage.getItem(key) ?? fallback ?? null\n}\n\nexport function setStorageValue(key: StorageKey, value: string): void {\n  localStorage.setItem(key, value)\n}\n\nexport function removeStorageValue(key: StorageKey): void {\n  localStorage.removeItem(key)\n}\n\nmigrateLocalStorage()\n\nfunction migrateLocalStorage(): void {\n  const localStorageVersion = getStorageValue(StorageKey.storageVersion, 'v0')\n\n  switch (localStorageVersion) {\n    case 'v0':\n      migrateToV1()\n  }\n}\n","import {\n  getStorageValue,\n  removeStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadHiddenLinks(): string[] {\n  const storageString = getStorageValue(StorageKey.hiddenItems)\n\n  if (storageString === null) {\n    return []\n  }\n\n  try {\n    const storageValue = JSON.parse(storageString)\n\n    if (!Array.isArray(storageValue)) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    if (storageValue.some((value) => typeof value !== 'string')) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    return storageValue\n  } catch {\n    removeStorageValue(StorageKey.hiddenItems)\n    return []\n  }\n}\n\nexport function saveHiddenLinks(values: string[]): void {\n  try {\n    const storageString = JSON.stringify(values)\n    setStorageValue(StorageKey.hiddenItems, storageString)\n  } catch {\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\n  }\n}\n","import { setStorageValue, StorageKey } from '../localStorageService'\n\nexport function migrateToV1(): void {\n  const wrongThemeSettingKey = 'sdh:theme-setting'\n  const themeSetting = localStorage.getItem(wrongThemeSettingKey)\n\n  if (themeSetting !== null) {\n    setStorageValue(StorageKey.themeSetting, themeSetting)\n    localStorage.removeItem(wrongThemeSettingKey)\n  }\n\n  setStorageValue(StorageKey.storageVersion, 'v1')\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react'\nimport { LinkItem } from '../links'\nimport {\n  loadHiddenLinks,\n  saveHiddenLinks\n} from '../services/localStorage/values/hiddenLinks'\n\nexport interface HiddenLinksContextValue {\n  hiddenLinks: string[]\n  setLinks: Dispatch<SetStateAction<string[]>>\n  toggleLink: (url: string, status?: LinkState) => void\n  toggleGroup: (state: LinkState, ...urls: Array<LinkItem['url']>) => void\n  allLinksAreHidden: (...links: LinkItem[]) => boolean\n}\n\nexport const HiddenLinksContext = createContext<HiddenLinksContextValue | null>(\n  null\n)\n\nexport type LinkState = 'show' | 'hide'\n\nexport function useHiddenLinksContextValue(): HiddenLinksContextValue {\n  const [hiddenLinks, setLinks] = useState<string[]>(loadHiddenLinks())\n\n  function toggleLink(urlToToggle: LinkItem['url']): void {\n    const newHiddenLinks = hiddenLinks.includes(urlToToggle)\n      ? hiddenLinks.filter((url) => url !== urlToToggle)\n      : [...hiddenLinks, urlToToggle]\n\n    setLinks(newHiddenLinks)\n    saveHiddenLinks(newHiddenLinks)\n  }\n\n  function toggleGroup(\n    state: LinkState,\n    ...urls: Array<LinkItem['url']>\n  ): void {\n    const newHiddenLinks =\n      state === 'show'\n        ? hiddenLinks.filter((url) => !urls.includes(url))\n        : [\n            ...hiddenLinks,\n            ...urls.filter((link) => !hiddenLinks.includes(link)),\n          ]\n\n    setLinks(newHiddenLinks)\n    saveHiddenLinks(newHiddenLinks)\n  }\n\n  function allLinksAreHidden(...links: LinkItem[]): boolean {\n    return links.every((link) => hiddenLinks.includes(link.url))\n  }\n\n  return { hiddenLinks, setLinks, toggleLink, toggleGroup, allLinksAreHidden }\n}\n","export function getIconUrl(icon: string): string {\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\n}\n","import { mdiLinkVariant } from '@mdi/js'\nimport React, { memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\n\nexport const DefaultIcon = memo(function DefaultIcon() {\n  return (\n    <div className=\"default-icon\">\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\n    </div>\n  )\n})\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\nimport React, {\n  memo,\n  MouseEvent,\n  useCallback,\n  useContext,\n  useMemo\n} from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { HiddenLinksContext } from '../../contexts/hiddenLinksContext'\nimport { classes } from '../../utils/jsx'\nimport { getIconUrl } from '../../utils/misc'\nimport { DefaultIcon } from '../Icon/DefaultIcon'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport './Link.scss'\n\ninterface Props {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  searchable?: boolean\n  customize?: boolean\n  visible?: boolean\n  focus?: boolean\n}\n\nexport const Link = memo<Props>(function Link({\n  title,\n  url,\n  icon,\n  color,\n  searchable = false,\n  customize = false,\n  visible = true,\n  focus = false,\n}) {\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n  const handleLinkClick = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>): void => {\n      if (!customize) return\n      if (hiddenLinksContext === null) return\n\n      event.preventDefault()\n      hiddenLinksContext.toggleLink(url)\n    },\n    [customize, hiddenLinksContext, url]\n  )\n\n  const linkClasses = useMemo(\n    () =>\n      classes({\n        link: true,\n        'link--is-visible': visible,\n        'link--has-focus': focus,\n        'link--customize-mode': customize,\n      }),\n    [customize, focus, visible]\n  )\n\n  if (!customize && !visible) {\n    return null\n  }\n\n  return (\n    <a\n      href={url}\n      rel=\"noreferrer\"\n      className={linkClasses}\n      onClick={handleLinkClick}\n    >\n      <div className=\"link__icon-container\" style={{ color }}>\n        {icon !== undefined ? (\n          <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\n        ) : (\n          <DefaultIcon />\n        )}\n      </div>\n\n      <div className=\"link__label\">{title}</div>\n\n      {searchable ? (\n        <div className=\"link__info\">\n          <span className=\"link__info-text\">\n            <kbd>Tab</kbd>: Search on site\n          </span>\n        </div>\n      ) : null}\n\n      {customize ? (\n        <div className=\"link__action\">\n          <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\n        </div>\n      ) : null}\n    </a>\n  )\n})\n","import { mdiTableEye, mdiTableEyeOff } from '@mdi/js'\nimport React, { memo, useCallback, useContext, useMemo } from 'react'\nimport { AppMode, CurrentModeContext } from '../../contexts/currentModeContext'\nimport {\n  HiddenLinksContext,\n  LinkState\n} from '../../contexts/hiddenLinksContext'\nimport { LinkGroup as ILinkGroup, LinkItem } from '../../links'\nimport { classes } from '../../utils/jsx'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport { Link } from './Link'\nimport './LinkGroup.scss'\n\ninterface Props {\n  group: ILinkGroup\n}\n\nexport const LinkGroup = memo<Props>(function LinkGroup({ group }) {\n  const currentModeContext = useContext(CurrentModeContext)\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n\n  const linkGroupClasses = useMemo(() => {\n    return classes({\n      'link-group': true,\n      'link-group--is-visible':\n        !hiddenLinksContext?.allLinksAreHidden(...group.items) ?? false,\n    })\n  }, [group.items, hiddenLinksContext])\n\n  const allGroupLinksAreHidden = useCallback(\n    (items: LinkItem[]): boolean => {\n      if (hiddenLinksContext === null) return false\n      const { allLinksAreHidden } = hiddenLinksContext\n      return allLinksAreHidden(...items)\n    },\n    [hiddenLinksContext]\n  )\n\n  const handleToggleGroupClick = useCallback(\n    (...items: LinkItem[]): void => {\n      if (hiddenLinksContext === null) return\n      const { toggleGroup, allLinksAreHidden } = hiddenLinksContext\n      const newState: LinkState = allLinksAreHidden(...items) ? 'show' : 'hide'\n      toggleGroup(newState, ...items.map((item) => item.url))\n    },\n    [hiddenLinksContext]\n  )\n\n  const noVisibleLinksInGroup = useMemo(() => {\n    if (hiddenLinksContext === null) return false\n    const { allLinksAreHidden } = hiddenLinksContext\n    return allLinksAreHidden(...group.items)\n  }, [group.items, hiddenLinksContext])\n\n  if (currentModeContext === null) return null\n  if (hiddenLinksContext === null) return null\n\n  const { isCurrentMode } = currentModeContext\n  const { hiddenLinks } = hiddenLinksContext\n\n  if (noVisibleLinksInGroup && !isCurrentMode(AppMode.customize)) return null\n\n  return (\n    <div className={linkGroupClasses}>\n      <div className=\"link-group__header\">\n        <div className=\"link-group__name\">{group.name}</div>\n\n        {isCurrentMode(AppMode.customize) ? (\n          <div\n            className=\"link-group__action\"\n            onClick={() => handleToggleGroupClick(...group.items)}\n          >\n            {allGroupLinksAreHidden(group.items) ? (\n              <MdiIcon path={mdiTableEyeOff} />\n            ) : (\n              <MdiIcon path={mdiTableEye} />\n            )}\n          </div>\n        ) : null}\n      </div>\n      <div className=\"link-group__list\">\n        {group.items.map((link) => (\n          <Link\n            key={link.url}\n            title={link.title}\n            url={link.url}\n            icon={link.icon}\n            color={link.color}\n            customize={isCurrentMode(AppMode.customize)}\n            visible={!hiddenLinks.includes(link.url)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n})\n","import linksData from './links.json'\nimport { OptionalExceptFor } from './utilityTypes'\n\nexport interface LinkItem {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  iconComp?: JSX.Element\n  searchUrl?: string\n  searchConcat?: string\n}\n\nexport type SearchTarget = OptionalExceptFor<\n  LinkItem,\n  'title' | 'url' | 'searchUrl'\n>\n\nexport interface LinkGroup {\n  name: string\n  items: LinkItem[]\n}\n\nexport interface Links {\n  items: LinkGroup[]\n}\n\nexport const links: Links = {\n  items: linksData.items,\n}\n\nexport function getAllLinks(): LinkItem[] {\n  return links.items.flatMap((group) => group.items)\n}\n","import React, { memo, useCallback } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { LinkItem } from '../../links'\nimport { getIconUrl } from '../../utils/misc'\nimport './SearchTargetItem.scss'\n\ninterface Props {\n  title: LinkItem['title']\n  icon: LinkItem['icon']\n  color: LinkItem['color']\n}\n\nexport const SearchTargetItem = memo<Props>(function SearchTargetItem({\n  title,\n  icon,\n  color,\n}) {\n  const getIcon = useCallback(() => {\n    if (icon === undefined) {\n      return null\n    }\n\n    const iconUrl = getIconUrl(icon)\n\n    return (\n      <span className=\"search-target-item__icon-container\" style={{ color }}>\n        <ReactSVG src={iconUrl} className=\"search-target-item__icon\" />\n      </span>\n    )\n  }, [color, icon])\n\n  return (\n    <div className=\"search-target-item\">\n      Search on {getIcon()} {title}:\n    </div>\n  )\n})\n","import fuzzy from 'fuzzysort'\nimport React, {\n  ChangeEvent,\n  Dispatch,\n\n  KeyboardEvent as ReactKeyboardEvent,\n  memo,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { AppMode, CurrentModeContext } from '../../contexts/currentModeContext'\nimport { HiddenLinksContext } from '../../contexts/hiddenLinksContext'\nimport { getAllLinks, LinkItem, SearchTarget } from '../../links'\nimport { Link } from '../Links/Link'\nimport './Search.scss'\nimport { SearchTargetItem } from './SearchTargetItem'\n\ninterface Props {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nexport const Search = memo<Props>(function Search({\n  searchTerm,\n  setSearchTerm,\n}) {\n  const {\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  } = useSearch(searchTerm, setSearchTerm)\n\n  const currentModeContext = useContext(CurrentModeContext)\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  })\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void => {\n      setSearchTerm(event.target.value)\n      setKeyboardIndex(0)\n    },\n    [setKeyboardIndex, setSearchTerm]\n  )\n\n  const handleInputKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLInputElement>): void => {\n      switch (event.key) {\n        case 'Backspace': {\n          if (searchTerm !== '') {\n            return\n          }\n\n          if (searchTarget !== null) {\n            setSearchTarget(null)\n          } else {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'Tab': {\n          event.preventDefault()\n\n          if (searchTarget !== null) {\n            return\n          }\n          if (focusedResult === null) {\n            return\n          }\n          if (focusedResult.obj.searchUrl === undefined) {\n            return\n          }\n\n          setSearchTarget(focusedResult.obj as SearchTarget)\n          setSearchTerm('')\n          break\n        }\n\n        case 'Enter': {\n          const url = getUrl(\n            focusedResult?.obj ?? null,\n            searchTarget,\n            searchTerm\n          )\n\n          if (url === null) {\n            return\n          }\n\n          if (event.ctrlKey) {\n            window.open(url, '', 'alwaysRaised=on')\n          } else {\n            window.location.href = url\n          }\n\n          if (event.ctrlKey || event.shiftKey) {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'ArrowUp': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.max(0, keyboardIndex - 1))\n          break\n        }\n\n        case 'ArrowDown': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\n        }\n      }\n    },\n    [\n      currentModeContext,\n      focusedResult,\n      keyboardIndex,\n      results,\n      searchTarget,\n      searchTerm,\n      setKeyboardIndex,\n      setSearchTarget,\n      setSearchTerm,\n    ]\n  )\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (searchTarget !== null) {\n          setSearchTarget(null)\n          setSearchTerm('')\n          return\n        }\n\n        currentModeContext?.setCurrentMode(AppMode.default)\n      }\n    },\n    [currentModeContext, searchTarget, setSearchTarget, setSearchTerm]\n  )\n\n  const hints = useMemo(\n    () => (\n      <>\n        <div className=\"search__results-hint\">Type ahead to filter links.</div>\n        <div className=\"search__results-hint\">\n          <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">Open link</div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (background)\n          </div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (foreground)\n          </div>\n        </div>\n      </>\n    ),\n    []\n  )\n\n  const resultElements = useMemo(\n    () => (\n      <>\n        {results !== null && results.total > 0 ? (\n          results.map((link) => (\n            <Link\n              key={link.obj.url}\n              title={link.obj.title}\n              url={link.obj.url}\n              icon={link.obj.icon}\n              searchable={link.obj.searchUrl !== undefined}\n              color={link.obj.color}\n              customize={false}\n              visible={true}\n              focus={link === focusedResult}\n            />\n          ))\n        ) : (\n          <div className=\"search__results-hint\">No results found...</div>\n        )}\n      </>\n    ),\n    [focusedResult, results]\n  )\n\n  return (\n    <div className=\"search\">\n      {searchTarget !== null ? (\n        <SearchTargetItem\n          title={searchTarget.title}\n          icon={searchTarget.icon}\n          color={searchTarget.color}\n        />\n      ) : null}\n\n      <input\n        className=\"search__input\"\n        autoFocus\n        type=\"text\"\n        value={searchTerm}\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\n        onChange={handleInputChange}\n        onKeyDown={handleInputKeyDown}\n      />\n\n      <div className=\"search__results\">\n        {searchTarget === null\n          ? searchTerm === ''\n            ? hints\n            : resultElements\n          : null}\n      </div>\n    </div>\n  )\n})\n\ninterface UseSearch {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n  searchTarget: SearchTarget | null\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\n  keyboardIndex: number\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\n  results: Fuzzysort.KeyResults<LinkItem> | null\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\n}\n\nfunction useSearch(\n  searchTerm: string,\n  setSearchTerm: Dispatch<SetStateAction<string>>\n): UseSearch {\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n\n  const visibleLinks = useMemo(() => {\n    if (hiddenLinksContext === null) {\n      return null\n    }\n\n    return getAllLinks().filter(\n      (link) => !hiddenLinksContext.hiddenLinks.includes(link.url)\n    )\n  }, [hiddenLinksContext])\n\n  const fuzzyOptions: Fuzzysort.KeyOptions = useMemo(\n    () => ({ key: 'title', allowTypo: false, limit: 6 }),\n    []\n  )\n\n  const results = useMemo(() => {\n    if (visibleLinks === null) return null\n    if (searchTerm === '') return null\n    if (searchTarget !== null) return null\n\n    return fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\n  }, [fuzzyOptions, searchTarget, searchTerm, visibleLinks])\n\n  const focusedResult = useMemo(() => results?.[keyboardIndex] ?? null, [\n    keyboardIndex,\n    results,\n  ])\n\n  useLayoutEffect(() => {\n    setSearchTerm('')\n    return () => {\n      setSearchTerm('')\n    }\n  }, [setSearchTerm])\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  }\n}\n\nfunction getUrl(\n  focusedItem: LinkItem | null,\n  searchTarget?: SearchTarget | null,\n  searchTerm?: string\n): string | null {\n  if (\n    searchTarget !== null &&\n    searchTarget !== undefined &&\n    searchTerm !== undefined &&\n    searchTerm !== ''\n  ) {\n    const concatChar = searchTarget.searchConcat ?? '+'\n    const encodedSearchTerm = searchTerm.replace(/ /g, concatChar)\n    return searchTarget.searchUrl.replace(/\\{search\\}/, encodedSearchTerm)\n  }\n\n  if (focusedItem !== null) {\n    return focusedItem.url\n  }\n\n  return null\n}\n","import {\n  mdiFormatListChecks,\n  mdiMagnify,\n  mdiThemeLightDark,\n  mdiWeatherNight,\n  mdiWeatherSunny\n} from '@mdi/js'\nimport React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { version } from '../package.json'\nimport './App.scss'\nimport { AppFooter } from './components/Footer/AppFooter'\nimport { FooterDivider } from './components/Footer/FooterDivider'\nimport { FooterGroup } from './components/Footer/FooterGroup'\nimport { FooterLink } from './components/Footer/FooterLink'\nimport { AppAction } from './components/Header/AppAction'\nimport { AppActions } from './components/Header/AppActions'\nimport { AppHeader } from './components/Header/AppHeader'\nimport { AppContent } from './components/Layout/AppContent'\nimport { LinkGroup } from './components/Links/LinkGroup'\nimport { Search } from './components/Search/Search'\nimport {\n  AppMode,\n  CurrentModeContext,\n  CurrentModeContextValue,\n  useCurrentModeContextValue\n} from './contexts/currentModeContext'\nimport {\n  HiddenLinksContext,\n  useHiddenLinksContextValue\n} from './contexts/hiddenLinksContext'\nimport { links } from './links'\nimport {\n  loadThemeSetting,\n  saveThemeSetting\n} from './services/localStorage/values/themeSetting'\n\nexport const WebdevHome: FC = () => {\n  const currentModeContextValue = useCurrentModeContextValue()\n  const hiddenLinksContextValue = useHiddenLinksContextValue()\n\n  const customizeMode = useCustomizeMode({ currentModeContextValue })\n  const searchMode = useSearchMode({ currentModeContextValue })\n  const themeSwitcher = useThemeSwitcher()\n\n  const { isCurrentMode } = currentModeContextValue\n\n  return (\n    <CurrentModeContext.Provider value={currentModeContextValue}>\n      <HiddenLinksContext.Provider value={hiddenLinksContextValue}>\n        <div className=\"app\">\n          <AppHeader />\n\n          <AppActions>\n            <AppAction\n              icon={mdiMagnify}\n              action={searchMode.handleSearchAction}\n              active={isCurrentMode(AppMode.search)}\n            />\n            <AppAction\n              icon={themeSwitcher.icon}\n              action={themeSwitcher.switchTheme}\n              active={false}\n            />\n            <AppAction\n              icon={mdiFormatListChecks}\n              action={customizeMode.handleCustomizeAction}\n              active={isCurrentMode(AppMode.customize)}\n            />\n          </AppActions>\n\n          {isCurrentMode(AppMode.default, AppMode.customize) ? (\n            <AppContent>\n              {links.items.map((group) => (\n                <LinkGroup group={group} key={group.name} />\n              ))}\n            </AppContent>\n          ) : (\n            <Search\n              searchTerm={searchMode.searchTerm}\n              setSearchTerm={searchMode.setSearchTerm}\n            />\n          )}\n\n          <AppFooter>\n            <FooterGroup title={'WebdevHome v' + version}>\n              <FooterLink\n                text=\"Changelog\"\n                url=\"https://github.com/webdevhome/webdevhome.github.io/releases\"\n              />\n              <FooterLink\n                text=\"GitHub\"\n                url=\"https://github.com/webdevhome/webdevhome.github.io\"\n              />\n            </FooterGroup>\n\n            <FooterDivider />\n\n            <FooterGroup title=\"Icons\">\n              <FooterLink\n                text=\"Material Design Icons\"\n                url=\"https://materialdesignicons.com\"\n              />\n              <FooterLink text=\"Simple Icons\" url=\"https://simpleicons.org/\" />\n            </FooterGroup>\n          </AppFooter>\n        </div>\n      </HiddenLinksContext.Provider>\n    </CurrentModeContext.Provider>\n  )\n}\n\n// #region customize feature\ninterface UseCustomizeModeParams {\n  currentModeContextValue: CurrentModeContextValue\n}\n\ninterface UseCustomizeModeReturn {\n  handleCustomizeAction: () => void\n}\n\nfunction useCustomizeMode({\n  currentModeContextValue,\n}: UseCustomizeModeParams): UseCustomizeModeReturn {\n  const { isCurrentMode, setCurrentMode, toggleMode } = currentModeContextValue\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGlobalKeydown)\n\n    function handleGlobalKeydown(event: KeyboardEvent): void {\n      if (event.key === 'Escape' && isCurrentMode(AppMode.customize)) {\n        setCurrentMode(AppMode.default)\n      }\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleGlobalKeydown)\n    }\n  }, [isCurrentMode, setCurrentMode])\n\n  const handleCustomizeAction = useCallback((): void => {\n    toggleMode(AppMode.customize)\n  }, [toggleMode])\n\n  return { handleCustomizeAction }\n}\n// #endregion customize feature\n\n// #region search feature\ninterface UseSearchModeParams {\n  currentModeContextValue: CurrentModeContextValue\n}\n\ninterface UseSearchModeReturn {\n  handleSearchAction: () => void\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nfunction useSearchMode({\n  currentModeContextValue,\n}: UseSearchModeParams): UseSearchModeReturn {\n  const [searchTerm, setSearchTerm] = useState<string>('')\n\n  const { isCurrentMode, setCurrentMode, toggleMode } = currentModeContextValue\n\n  const handleGlobalKeypress = useCallback(\n    (event: KeyboardEvent) => {\n      if (isCurrentMode(AppMode.default)) {\n        if (event.key === '\\n') {\n          return\n        }\n\n        setSearchTerm(event.key)\n        setCurrentMode(AppMode.search)\n      }\n    },\n    [isCurrentMode, setCurrentMode]\n  )\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleGlobalKeypress)\n\n    return () => {\n      window.removeEventListener('keypress', handleGlobalKeypress)\n    }\n  }, [handleGlobalKeypress, isCurrentMode, setCurrentMode])\n\n  const handleSearchAction = useCallback((): void => {\n    setSearchTerm('')\n    toggleMode(AppMode.search)\n  }, [toggleMode])\n\n  return { handleSearchAction, searchTerm, setSearchTerm }\n}\n// #endregion search feature\n\n// #region theme switcher\nexport const themeStates = ['auto', 'light', 'dark'] as const\nexport type ThemeState = typeof themeStates[number]\n\ninterface UseThemeSwitcherReturn {\n  icon: string\n  switchTheme: () => void\n}\n\nfunction useThemeSwitcher(): UseThemeSwitcherReturn {\n  const [themeState, setThemeState] = useState<ThemeState>(loadThemeSetting())\n\n  const bodyElement = useMemo(\n    () => globalThis.document.getElementsByTagName('body')[0],\n    []\n  )\n\n  useEffect(() => {\n    saveThemeSetting(themeState)\n    bodyElement.className = `${themeState}-theme`\n  }, [bodyElement.className, themeState])\n\n  const icon = useMemo((): string => {\n    if (themeState === 'light') {\n      return mdiWeatherSunny\n    }\n    if (themeState === 'dark') {\n      return mdiWeatherNight\n    }\n    return mdiThemeLightDark\n  }, [themeState])\n\n  const switchTheme = useCallback((): void => {\n    switch (themeState) {\n      case 'light':\n        setThemeState('dark')\n        break\n      case 'dark':\n        setThemeState('auto')\n        break\n      default:\n        setThemeState('light')\n        break\n    }\n  }, [themeState])\n\n  return { icon, switchTheme }\n}\n// #endregion theme switcher\n","import { ThemeState } from '../../../App'\nimport {\n  getStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadThemeSetting(): ThemeState {\n  const value = getStorageValue(StorageKey.themeSetting)\n\n  if (value === null) return 'auto'\n  if (value !== 'auto' && value !== 'light' && value !== 'dark') return 'auto'\n\n  return value\n}\n\nexport function saveThemeSetting(value: ThemeState): void {\n  setStorageValue(StorageKey.themeSetting, value)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { WebdevHome } from './App'\nimport './index.scss'\n\nReactDOM.render(<WebdevHome />, document.getElementById('root'))\n"],"sourceRoot":""}