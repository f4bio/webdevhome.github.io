{"version":3,"sources":["utils/jsx.ts","contexts/currentModeContext.ts","components/MdiIcon.tsx","components/AppAction.tsx","components/AppActions.tsx","components/AppContent.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/FooterDivider.tsx","components/FooterGroup.tsx","components/FooterLink.tsx","services/localStorage/localStorageService.ts","services/localStorage/migrations/v1.ts","contexts/hiddenLinksContext.ts","services/localStorage/values/hiddenLinks.ts","utils/misc.ts","components/DefaultIcon.tsx","components/Link.tsx","components/LinkGroup.tsx","components/LinkList.tsx","links.ts","components/SearchTargetItem.tsx","components/Search.tsx","App.tsx","services/localStorage/values/themeSetting.ts","index.tsx"],"names":["classes","classesObject","result","Object","entries","className","push","join","AppMode","MdiIcon","memo","path","color","iconStyle","useMemo","width","height","Icon","style","AppAction","icon","action","active","actionClasses","onClick","AppActions","children","AppContent","AppFooter","AppHeader","FooterDivider","FooterGroup","title","FooterLink","text","url","href","CurrentModeContext","createContext","StorageKey","getStorageValue","key","fallback","localStorage","getItem","setStorageValue","value","setItem","removeStorageValue","removeItem","storageVersion","themeSetting","migrateToV1","migrateLocalStorage","HiddenLinksContext","useHiddenLinksContextValue","useState","storageString","hiddenItems","storageValue","JSON","parse","Array","isArray","some","loadHiddenLinks","hiddenLinks","setHiddenLinks","toggleHiddenLink","urlToToggle","newHiddenLinks","includes","filter","values","stringify","Error","saveHiddenLinks","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","searchable","customize","visible","focus","hiddenLinksContext","useContext","handleLinkClick","useCallback","event","preventDefault","linkClasses","link","rel","undefined","src","mdiEye","mdiEyeOff","LinkGroup","name","LinkList","links","currentModeContext","isCurrentMode","getLinkGroup","group","items","every","map","SearchTargetItem","getIcon","iconUrl","Search","searchTerm","setSearchTerm","keyboardIndex","setKeyboardIndex","searchTarget","setSearchTarget","visibleLinks","flatMap","fuzzyOptions","allowTypo","limit","results","fuzzy","go","focusedResult","useLayoutEffect","useSearch","useEffect","window","addEventListener","handleGlobalKeyDown","removeEventListener","handleInputChange","target","handleInputKeyDown","setCurrentMode","default","obj","searchUrl","focusedItem","concatChar","searchConcat","encodedSearchTerm","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","total","hints","resultElements","autoFocus","type","placeholder","onChange","onKeyDown","WebdevHome","currentModeContextValue","currentMode","toggleMode","mode","useCurrentModeContextValue","hiddenLinksContextValue","customizeMode","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeMode","searchMode","handleGlobalKeypress","search","handleSearchAction","useSearchMode","themeSwitcher","loadThemeSetting","themeState","setThemeState","bodyElement","globalThis","getElementsByTagName","mdiWeatherSunny","mdiWeatherNight","mdiThemeLightDark","switchTheme","useThemeSwitcher","Provider","mdiMagnify","mdiFormatListChecks","version","ReactDOM","render","getElementById"],"mappings":"skjBAAO,SAASA,EAAQC,GAGtB,IAFA,IAAMC,EAAmB,GAEzB,MAAqCC,OAAOC,QAAQH,GAApD,eAAoE,CAAC,IAAD,sBAAxDI,EAAwD,MAChD,IADgD,MAEhEH,EAAOI,KAAKD,GAIhB,OAAOH,EAAOK,KAAK,K,ICPTC,E,QCOCC,EAAqBC,gBAAK,YAAiC,IAA9BL,EAA6B,EAA7BA,UAAWM,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACnDC,EAAYC,mBAAQ,iBAAO,CAAEC,MAAO,GAAIC,OAAQ,MAAO,IAE7D,OACE,kBAACC,EAAA,KAAD,CAAMZ,UAAWA,EAAWM,KAAMA,EAAMO,MAAOL,EAAWD,MAAOA,OCHxDO,EAAuBT,gBAAK,YAA+B,IAA5BU,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAClDC,EAAgBT,mBACpB,iBAAO,CACL,cAAc,EACd,wBAAyBQ,KAE3B,CAACA,IAGH,OACE,yBAAKjB,UAAWL,EAAQuB,GAAgBC,QAASH,GAC/C,kBAACZ,EAAD,CAASE,KAAMS,QCnBRK,EAAiBf,gBAAK,YAAmB,IAAhBgB,EAAe,EAAfA,SACpC,OAAO,yBAAKrB,UAAU,eAAeqB,MCD1BC,EAAiBjB,gBAAK,YAAmB,IAAhBgB,EAAe,EAAfA,SACpC,OAAO,yBAAKrB,UAAU,eAAeqB,MCD1BE,EAAgBlB,gBAAK,YAAmB,IAAhBgB,EAAe,EAAfA,SACnC,OAAO,yBAAKrB,UAAU,cAAcqB,MCDzBG,EAAgBnB,gBAAK,WAChC,OACE,yBAAKL,UAAU,cACb,yBAAKA,UAAU,yBACb,0BAAMA,UAAU,eAAhB,KACA,0BAAMA,UAAU,gBAAhB,UACA,0BAAMA,UAAU,gBAAhB,QACA,0BAAMA,UAAU,eAAhB,YCPKyB,EAAoBpB,gBAAK,WACpC,OAAO,yBAAKL,UAAU,sBCIX0B,EAAcrB,gBAAK,YAGrB,IAFTgB,EAEQ,EAFRA,SACAM,EACQ,EADRA,MAEA,OACE,yBAAK3B,UAAU,gBACb,yBAAKA,UAAU,uBAAuB2B,GACrCN,MCPMO,EAAwBvB,gBAAK,YAAoB,IAAjBwB,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACjD,OACE,uBAAGC,KAAMD,EAAK9B,UAAU,eACrB6B,O,STRK1B,O,qBAAAA,I,mBAAAA,I,0BAAAA,M,KAaL,IAAM6B,EAAqBC,wBAChC,M,IUdUC,E,eAQL,SAASC,EAAgBC,EAAiBC,GAAmC,IAAD,IACjF,2BAAOC,aAAaC,QAAQH,UAA5B,QAAoCC,SAApC,QAAgD,KAG3C,SAASG,EAAgBJ,EAAiBK,GAC/CH,aAAaI,QAAQN,EAAKK,GAGrB,SAASE,EAAmBP,GACjCE,aAAaM,WAAWR,I,SAjBdF,K,qCAAAA,E,+BAAAA,E,kCAAAA,M,KAsBZ,WAGE,OAF4BC,EAAgBD,EAAWW,eAAgB,OAGrE,IAAK,MC1BF,WACL,IACMC,EAAeR,aAAaC,QADL,qBAGR,OAAjBO,IACFN,EAAgBN,EAAWY,aAAcA,GACzCR,aAAaM,WALc,sBAQ7BJ,EAAgBN,EAAWW,eAAgB,MDkBvCE,IAPNC,GEbO,IAAMC,EAAqBhB,wBAChC,MAGK,SAASiB,IAAuD,IAAD,EAC9BC,mBCPjC,WACL,IAAMC,EAAgBjB,EAAgBD,EAAWmB,aAEjD,GAAsB,OAAlBD,EACF,MAAO,GAGT,IACE,IAAME,EAAeC,KAAKC,MAAMJ,GAEhC,OAAKK,MAAMC,QAAQJ,GAKfA,EAAaK,MAAK,SAAClB,GAAD,MAA4B,kBAAVA,MACtCE,EAAmBT,EAAWmB,aACvB,IAGFC,GATLX,EAAmBT,EAAWmB,aACvB,IAST,SAEA,OADAV,EAAmBT,EAAWmB,aACvB,IDhBgDO,IADW,mBAC7DC,EAD6D,KAChDC,EADgD,KAWpE,MAAO,CACLD,cACAC,iBACAC,iBAXF,SAA0BC,GACxB,IAAMC,EAAiBJ,EAAYK,SAASF,GACxCH,EAAYM,QAAO,SAACrC,GAAD,OAASA,IAAQkC,KADjB,sBAEfH,GAFe,CAEFG,IACrBF,EAAeG,GCcZ,SAAyBG,GAC9B,IACE,IAAMhB,EAAgBG,KAAKc,UAAUD,GACrC5B,EAAgBN,EAAWmB,YAAaD,GACxC,SACA,MAAM,IAAIkB,MAAM,4DDlBhBC,CAAgBN,KErBb,SAASO,EAAWzD,GAAuB,IAAD,EAC/C,MAAM,GAAN,iBAAU0D,mHAAYC,4BAAtB,QAA8C,GAA9C,yBAAiE3D,EAAjE,QCGK,IAAM4D,EAAkBtE,gBAAK,WAClC,OACE,yBAAKL,UAAU,gBACb,kBAACI,EAAD,CAASE,KAAMsE,IAAgBrE,MAAM,aCoB9BsE,EAAkBxE,gBAC7B,YASO,IARLsB,EAQI,EARJA,MACAG,EAOI,EAPJA,IACAf,EAMI,EANJA,KACAR,EAKI,EALJA,MAKI,IAJJuE,kBAII,aAHJC,iBAGI,aAFJC,eAEI,aADJC,aACI,SACEC,EAAqBC,qBAAWlC,GAChCmC,EAAkBC,uBACtB,SAACC,GACMP,GACsB,OAAvBG,IAEJI,EAAMC,iBACNL,EAAmBnB,iBAAiBjC,MAEtC,CAACiD,EAAWG,EAAoBpD,IAG5B0D,EAAc/E,mBAClB,iBAAO,CACLgF,MAAM,EACN,mBAAoBT,EACpB,kBAAmBC,KAErB,CAACA,EAAOD,IAGV,OAAKD,GAAcC,EAKjB,uBACEjD,KAAMD,EACN4D,IAAI,aACJ1F,UAAWL,EAAQ6F,GACnBrE,QAASiE,GAET,yBAAKpF,UAAU,uBAAuBa,MAAO,CAAEN,eACnCoF,IAAT5E,EACC,kBAAC,IAAD,CAAU6E,IAAKpB,EAAWzD,GAAOf,UAAU,eAE3C,kBAAC2E,EAAD,OAIJ,yBAAK3E,UAAU,eAAe2B,GAE7BmD,EACC,yBAAK9E,UAAU,cACb,0BAAMA,UAAU,mBACd,oCADF,qBAIA,KAEH+E,EACC,yBAAK/E,UAAU,gBACb,kBAACI,EAAD,CAASE,KAAM0E,EAAUa,IAASC,OAElC,MAhCC,QCtDAC,EAAuB1F,gBAAK,YAAyB,IAAtBgB,EAAqB,EAArBA,SAAU2E,EAAW,EAAXA,KACpD,OACE,yBAAKhG,UAAU,cACb,yBAAKA,UAAU,oBAAoBgG,GACnC,yBAAKhG,UAAU,oBAAoBqB,OCC5B4E,EAAsB5F,gBAAK,YAA6B,IAA1B6F,EAAyB,EAAzBA,MAAOrC,EAAkB,EAAlBA,YAC1CsC,EAAqBhB,qBAAWnD,GAEtC,GAA2B,OAAvBmE,EACF,OAAO,KAJyD,IAO1DC,EAAkBD,EAAlBC,cAEFC,EAAehB,uBACnB,SAACiB,GAKC,OAJ8BA,EAAMC,MAAMC,OAAM,SAACf,GAAD,OAC9C5B,EAAYK,SAASuB,EAAK3D,SAGCsE,EAAcjG,EAAQ4E,WAC1C,KAIP,kBAACgB,EAAD,CAAW3D,IAAKkE,EAAMN,KAAMA,KAAMM,EAAMN,MACrCM,EAAMC,MAAME,KAAI,SAAChB,GAAD,OACf,kBAACZ,EAAD,CACEzC,IAAKqD,EAAK3D,IACVH,MAAO8D,EAAK9D,MACZG,IAAK2D,EAAK3D,IACVf,KAAM0E,EAAK1E,KACXR,MAAOkF,EAAKlF,MACZwE,UAAWqB,EAAcjG,EAAQ4E,WACjCC,SAAUnB,EAAYK,SAASuB,EAAK3D,aAM9C,CAAC+B,EAAauC,IAGhB,OAAO,oCAAGF,EAAMO,IAAIJ,O,iBCtBTH,EAAe,CAC1BK,M,MAAiBA,OCjBZ,IAAMG,EAA8BrG,gBAAK,YAI5C,IAHFsB,EAGC,EAHDA,MACAZ,EAEC,EAFDA,KACAR,EACC,EADDA,MAEMoG,EAAUtB,uBAAY,WAC1B,QAAaM,IAAT5E,EACF,OAAO,KAGT,IAAM6F,EAAUpC,EAAWzD,GAE3B,OACE,0BAAMf,UAAU,qCAAqCa,MAAO,CAAEN,UAC5D,kBAAC,IAAD,CAAUqF,IAAKgB,EAAS5G,UAAU,gCAGrC,CAACO,EAAOQ,IAEX,OACE,yBAAKf,UAAU,sBAAf,aACa2G,IADb,IACyBhF,EADzB,QCLSkF,EAAoBxG,gBAAK,YAAoC,IAAjCyG,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EA+NzE,SACED,EACAC,GACY,IAAD,EAC+B5D,mBAAiB,GADhD,mBACJ6D,EADI,KACWC,EADX,OAE6B9D,mBAA8B,MAF3D,mBAEJ+D,EAFI,KAEUC,EAFV,KAGLjC,EAAqBC,qBAAWlC,GAEhCmE,EAAe3G,mBAAQ,WAC3B,OAA2B,OAAvByE,EACK,KFnOJgB,EAAMK,MAAMc,SAAQ,SAACf,GAAD,OAAWA,EAAMC,SEsOrBpC,QACnB,SAACsB,GAAD,OAAWP,EAAmBrB,YAAYK,SAASuB,EAAK3D,UAEzD,CAACoD,IAEEoC,EAAqC7G,mBACzC,iBAAO,CAAE2B,IAAK,QAASmF,WAAW,EAAOC,MAAO,KAChD,IAGIC,EAAUhH,mBAAQ,WACtB,OAAqB,OAAjB2G,GACe,KAAfN,GACiB,OAAjBI,EAF8B,KAI3BQ,IAAMC,GAAGb,EAAYM,EAAcE,KACzC,CAACA,EAAcJ,EAAcJ,EAAYM,IAEtCQ,EAAgBnH,mBAAQ,yCAAMgH,QAAN,IAAMA,OAAN,EAAMA,EAAUT,UAAhB,QAAkC,OAAM,CACpEA,EACAS,IAUF,OAPAI,2BAAgB,WAEd,OADAd,EAAc,IACP,WACLA,EAAc,OAEf,CAACA,IAEG,CACLD,aACAC,gBACAG,eACAC,kBACAH,gBACAC,mBACAQ,UACAG,iBA1QEE,CAAUhB,EAAYC,GANxBG,EAFqE,EAErEA,aACAC,EAHqE,EAGrEA,gBACAH,EAJqE,EAIrEA,cACAC,EALqE,EAKrEA,iBACAQ,EANqE,EAMrEA,QACAG,EAPqE,EAOrEA,cAGIzB,EAAqBhB,qBAAWnD,GAEtC+F,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWC,GAE5B,WACLF,OAAOG,oBAAoB,UAAWD,OAI1C,IAAME,EAAoB/C,uBACxB,SAACC,GACCyB,EAAczB,EAAM+C,OAAO5F,OAC3BwE,EAAiB,KAEnB,CAACA,EAAkBF,IAGfuB,EAAqBjD,uBACzB,SAACC,GACC,OAAQA,EAAMlD,KACZ,IAAK,YACH,GAAmB,KAAf0E,EACF,OAGmB,OAAjBI,EACFC,EAAgB,MAEE,OAAlBhB,QAAkB,IAAlBA,KAAoBoC,eAAepI,EAAQqI,SAE7C,MAGF,IAAK,MAGH,GAFAlD,EAAMC,iBAEe,OAAjB2B,EACF,OAEF,GAAsB,OAAlBU,EACF,OAEF,QAAoCjC,IAAhCiC,EAAca,IAAIC,UACpB,OAGFvB,EAAgBS,EAAca,KAC9B1B,EAAc,IACd,MAGF,IAAK,QAAU,IAAD,EACNjF,EAuNhB,SACE6G,EACAzB,EACAJ,GAEA,GACmB,OAAjBI,QACiBvB,IAAjBuB,QACevB,IAAfmB,GACe,KAAfA,EACA,CAAC,IAAD,EACM8B,EAAU,UAAG1B,EAAa2B,oBAAhB,QAAgC,IAC1CC,EAAoBhC,EAAWiC,QAAQ,KAAMH,GACnD,OAAO1B,EAAawB,UAAUK,QAAQ,aAAcD,GAGtD,GAAoB,OAAhBH,EACF,OAAOA,EAAY7G,IAGrB,OAAO,KA3OakH,CAAM,iBAChBpB,QADgB,IAChBA,OADgB,EAChBA,EAAea,WADC,QACM,KACtBvB,EACAJ,GAGF,GAAY,OAARhF,EACF,OAGEwD,EAAM2D,QACRjB,OAAOkB,KAAKpH,EAAK,GAAI,mBAErBkG,OAAOmB,SAASpH,KAAOD,GAGrBwD,EAAM2D,SAAW3D,EAAM8D,YACP,OAAlBjD,QAAkB,IAAlBA,KAAoBoC,eAAepI,EAAQqI,UAE7C,MAGF,IAAK,UACH,GAAgB,OAAZf,EACF,OAEFnC,EAAMC,iBACN0B,EAAiBoC,KAAKC,IAAI,EAAGtC,EAAgB,IAC7C,MAGF,IAAK,YACH,GAAgB,OAAZS,EACF,OAEFnC,EAAMC,iBACN0B,EAAiBoC,KAAKE,IAAI9B,EAAQ+B,MAAQ,EAAGxC,EAAgB,OAInE,CACEb,EACAyB,EACAZ,EACAS,EACAP,EACAJ,EACAG,EACAE,EACAJ,IAIEmB,EAAsB7C,uBAC1B,SAACC,GACC,GAAkB,WAAdA,EAAMlD,IAAkB,CAC1B,GAAqB,OAAjB8E,EAGF,OAFAC,EAAgB,WAChBJ,EAAc,IAIE,OAAlBZ,QAAkB,IAAlBA,KAAoBoC,eAAepI,EAAQqI,YAG/C,CAACrC,EAAoBe,EAAcC,EAAiBJ,IAGhD0C,EAAQhJ,mBACZ,kBACE,oCACE,yBAAKT,UAAU,wBAAf,+BACA,yBAAKA,UAAU,wBACb,uCACA,yBAAKA,UAAU,oCAAf,cAEF,yBAAKA,UAAU,wBACb,qCADF,MACoB,uCAClB,yBAAKA,UAAU,oCAAf,wCAIF,yBAAKA,UAAU,wBACb,qCADF,MACoB,sCADpB,MACuC,uCACrC,yBAAKA,UAAU,oCAAf,2CAMN,IAGI0J,EAAiBjJ,mBACrB,kBACE,oCACe,OAAZgH,GAAoBA,EAAQ+B,MAAQ,EACnC/B,EAAQhB,KAAI,SAAChB,GAAD,OACV,kBAACZ,EAAD,CACEzC,IAAKqD,EAAKgD,IAAI3G,IACdH,MAAO8D,EAAKgD,IAAI9G,MAChBG,IAAK2D,EAAKgD,IAAI3G,IACdf,KAAM0E,EAAKgD,IAAI1H,KACf+D,gBAAmCa,IAAvBF,EAAKgD,IAAIC,UACrBnI,MAAOkF,EAAKgD,IAAIlI,MAChBwE,WAAW,EACXC,SAAS,EACTC,MAAOQ,IAASmC,OAIpB,yBAAK5H,UAAU,wBAAf,0BAIN,CAAC4H,EAAeH,IAGlB,OACE,yBAAKzH,UAAU,UACK,OAAjBkH,EACC,kBAAC,EAAD,CACEvF,MAAOuF,EAAavF,MACpBZ,KAAMmG,EAAanG,KACnBR,MAAO2G,EAAa3G,QAEpB,KAEJ,2BACEP,UAAU,gBACV2J,WAAS,EACTC,KAAK,OACLnH,MAAOqE,EACP+C,YAA8B,OAAjB3C,EAAwB,kBAAoB,YACzD4C,SAAU1B,EACV2B,UAAWzB,IAGb,yBAAKtI,UAAU,mBACK,OAAjBkH,EACkB,KAAfJ,EACE2C,EACAC,EACF,UC7LL,IAAMM,EAAiB,WAC5B,IAAMC,EtBzBD,WAAgE,IAAD,EAC9B9G,mBAAkBhD,EAAQqI,SADI,mBAC7D0B,EAD6D,KAChD3B,EADgD,KAepE,MAAO,CACL2B,cACA3B,iBACA4B,WAfF,SAAoBC,GAEhB7B,EADE6B,IAASF,EACI/J,EAAQqI,QAER4B,IAYjBhE,cARF,WAAqD,IAAD,uBAA1BgE,EAA0B,yBAA1BA,EAA0B,gBAClD,OAAOA,EAAKlG,SAASgG,KsBaSG,GAC1BC,EAA0BpH,IAE1BqH,EA+ER,YAEoD,IADlDN,EACiD,EADjDA,wBAEQ7D,EAA8C6D,EAA9C7D,cAAemC,EAA+B0B,EAA/B1B,eAAgB4B,EAAeF,EAAfE,WAoBvC,OAlBApC,qBAAU,WAGR,SAASyC,EAAoBlF,GACT,WAAdA,EAAMlD,KAAoBgE,EAAcjG,EAAQ4E,YAClDwD,EAAepI,EAAQqI,SAI3B,OARAiC,SAASxC,iBAAiB,UAAWuC,GAQ9B,WACLC,SAAStC,oBAAoB,UAAWqC,MAEzC,CAACpE,EAAemC,IAMZ,CAAEmC,sBAJqBrF,uBAAY,WACxC8E,EAAWhK,EAAQ4E,aAClB,CAACoF,KApGkBQ,CAAiB,CAAEV,4BACnCW,EAoHR,YAE8C,IAD5CX,EAC2C,EAD3CA,wBAC2C,EACP9G,mBAAiB,IADV,mBACpC2D,EADoC,KACxBC,EADwB,KAGnCX,EAA8C6D,EAA9C7D,cAAemC,EAA+B0B,EAA/B1B,eAAgB4B,EAAeF,EAAfE,WAEjCU,EAAuBxF,uBAC3B,SAACC,GACC,GAAIc,EAAcjG,EAAQqI,SAAU,CAClC,GAAkB,OAAdlD,EAAMlD,IACR,OAGF2E,EAAczB,EAAMlD,KACpBmG,EAAepI,EAAQ2K,WAG3B,CAAC1E,EAAemC,IAgBlB,OAbAR,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,WAAY4C,GAE7B,WACL7C,OAAOG,oBAAoB,WAAY0C,MAExC,CAACA,EAAsBzE,EAAemC,IAOlC,CAAEwC,mBALkB1F,uBAAY,WACrC0B,EAAc,IACdoD,EAAWhK,EAAQ2K,UAClB,CAACX,IAEyBrD,aAAYC,iBAtJtBiE,CAAc,CAAEf,4BAC7BgB,EAkKR,WAAqD,IAAD,EACd9H,mBC7M/B,WACL,IAAMV,EAAQN,EAAgBD,EAAWY,cAEzC,OAAc,OAAVL,GACU,SAAVA,GAA8B,UAAVA,GAA+B,SAAVA,EADlB,OAGpBA,EDuMkDyI,IADP,mBAC3CC,EAD2C,KAC/BC,EAD+B,KAG5CC,EAAc5K,mBAClB,kBAAM6K,WAAWb,SAASc,qBAAqB,QAAQ,KACvD,IAGFxD,qBAAU,WC3ML,IAA0BtF,ID4MZ0I,EC3MnB3I,EAAgBN,EAAWY,aAAcL,GD4MvC4I,EAAYrL,UAAZ,UAA2BmL,EAA3B,YACC,CAACE,EAAYrL,UAAWmL,IAE3B,IAAMpK,EAAON,mBAAQ,WACnB,MAAmB,UAAf0K,EACKK,IAEU,SAAfL,EACKM,IAEFC,MACN,CAACP,IAEEQ,EAActG,uBAAY,WAC9B,OAAQ8F,GACN,IAAK,QACHC,EAAc,QACd,MACF,IAAK,OACHA,EAAc,QACd,MACF,QACEA,EAAc,YAGjB,CAACD,IAEJ,MAAO,CAAEpK,OAAM4K,eAvMOC,GAEdxF,EAAkB6D,EAAlB7D,cACAvC,EAAgByG,EAAhBzG,YAER,OACE,kBAAC7B,EAAmB6J,SAApB,CAA6BpJ,MAAOwH,GAClC,kBAAChH,EAAmB4I,SAApB,CAA6BpJ,MAAO6H,GAClC,yBAAKtK,UAAU,OACb,kBAACwB,EAAD,MAEA,kBAACJ,EAAD,KACE,kBAACN,EAAD,CACEC,KAAM+K,IACN9K,OAAQ4J,EAAWG,mBACnB9J,OAAQmF,EAAcjG,EAAQ2K,UAEhC,kBAAChK,EAAD,CACEC,KAAMkK,EAAclK,KACpBC,OAAQiK,EAAcU,YACtB1K,QAAQ,IAEV,kBAACH,EAAD,CACEC,KAAMgL,IACN/K,OAAQuJ,EAAcG,sBACtBzJ,OAAQmF,EAAcjG,EAAQ4E,cAIjCqB,EAAcjG,EAAQqI,QAASrI,EAAQ4E,WACtC,kBAACzD,EAAD,KACE,kBAAC2E,EAAD,CAAUC,MAAOA,EAAMK,MAAO1C,YAAaA,KAG7C,kBAACgD,EAAD,CACEC,WAAY8D,EAAW9D,WACvBC,cAAe6D,EAAW7D,gBAI9B,kBAACxF,EAAD,KACE,kBAAC,EAAD,CAAaI,MAAO,eAAiBqK,KACnC,kBAACpK,EAAD,CACEC,KAAK,YACLC,IAAI,gEAEN,kBAACF,EAAD,CACEC,KAAK,SACLC,IAAI,wDAIR,kBAACL,EAAD,MAEA,kBAAC,EAAD,CAAaE,MAAM,SACjB,kBAACC,EAAD,CACEC,KAAK,wBACLC,IAAI,oCAEN,kBAACF,EAAD,CAAYC,KAAK,eAAeC,IAAI,mC,MEvGlDmK,IAASC,OAAO,kBAAC,EAAD,MAAgBzB,SAAS0B,eAAe,W","file":"static/js/main.29b7ead0.chunk.js","sourcesContent":["export function classes(classesObject: Record<string, boolean>): string {\n  const result: string[] = []\n\n  for (const [className, condition] of Object.entries(classesObject)) {\n    if (condition === true) {\n      result.push(className)\n    }\n  }\n\n  return result.join(' ')\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react'\n\nexport enum AppMode {\n  default,\n  search,\n  customize,\n}\n\nexport interface CurrentModeContextValue {\n  currentMode: AppMode\n  setCurrentMode: Dispatch<SetStateAction<AppMode>>\n  toggleMode: (mode: AppMode) => void\n  isCurrentMode: (...mode: AppMode[]) => boolean\n}\n\nexport const CurrentModeContext = createContext<CurrentModeContextValue | null>(\n  null\n)\n\nexport function useCurrentModeContextValue(): CurrentModeContextValue {\n  const [currentMode, setCurrentMode] = useState<AppMode>(AppMode.default)\n\n  function toggleMode(mode: AppMode): void {\n    if (mode === currentMode) {\n      setCurrentMode(AppMode.default)\n    } else {\n      setCurrentMode(mode)\n    }\n  }\n\n  function isCurrentMode(...mode: AppMode[]): boolean {\n    return mode.includes(currentMode)\n  }\n\n  return {\n    currentMode,\n    setCurrentMode,\n    toggleMode,\n    isCurrentMode,\n  }\n}\n","import { Icon } from '@mdi/react'\nimport React, { FC, memo, useMemo } from 'react'\n\ninterface Props {\n  path: string\n  className?: string\n  color?: string\n}\n\nexport const MdiIcon: FC<Props> = memo(({ className, path, color }) => {\n  const iconStyle = useMemo(() => ({ width: 24, height: 24 }), [])\n\n  return (\n    <Icon className={className} path={path} style={iconStyle} color={color} />\n  )\n})\n","import React, { FC, memo, useMemo } from 'react'\nimport { classes } from '../utils/jsx'\nimport { MdiIcon } from './MdiIcon'\n\ninterface Props {\n  icon: string\n  active: boolean\n  action: () => void\n}\n\nexport const AppAction: FC<Props> = memo(({ icon, action, active }) => {\n  const actionClasses = useMemo(\n    () => ({\n      'app-action': true,\n      'app-action--is-active': active,\n    }),\n    [active]\n  )\n\n  return (\n    <div className={classes(actionClasses)} onClick={action}>\n      <MdiIcon path={icon} />\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppActions: FC = memo(({ children }) => {\n  return <div className=\"app-actions\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppContent: FC = memo(({ children }) => {\n  return <div className=\"app-content\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppFooter: FC = memo(({ children }) => {\n  return <div className=\"app-footer\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppHeader: FC = memo(() => {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header__logo logo\">\n        <span className=\"logo__shape\">&lt;</span>\n        <span className=\"logo__char-1\">Webdev</span>\n        <span className=\"logo__char-2\">Home</span>\n        <span className=\"logo__shape\"> /&gt;</span>\n      </div>\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const FooterDivider: FC = memo(() => {\n  return <div className=\"footer-divider\"></div>\n})\n","import React, { memo, ReactNode } from 'react'\n\ninterface Props {\n  children?: ReactNode\n  title: string\n}\n\nexport const FooterGroup = memo(function FooterGroup({\n  children,\n  title,\n}: Props) {\n  return (\n    <div className=\"footer-group\">\n      <div className=\"footer-group__title\">{title}</div>\n      {children}\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\ninterface Props {\n  text: string\n  url: string\n}\n\nexport const FooterLink: FC<Props> = memo(({ text, url }) => {\n  return (\n    <a href={url} className=\"footer-link\">\n      {text}\n    </a>\n  )\n})\n","import { migrateToV1 } from './migrations/v1'\n\nexport enum StorageKey {\n  storageVersion = 'wdh:storage-version',\n  hiddenItems = 'wdh:hidden-items',\n  themeSetting = 'wdh:theme-setting',\n}\n\nexport function getStorageValue(key: StorageKey): string | null\nexport function getStorageValue(key: StorageKey, fallback: string): string\nexport function getStorageValue(key: StorageKey, fallback?: string): string | null {\n  return localStorage.getItem(key) ?? fallback ?? null\n}\n\nexport function setStorageValue(key: StorageKey, value: string): void {\n  localStorage.setItem(key, value)\n}\n\nexport function removeStorageValue(key: StorageKey): void {\n  localStorage.removeItem(key)\n}\n\nmigrateLocalStorage()\n\nfunction migrateLocalStorage(): void {\n  const localStorageVersion = getStorageValue(StorageKey.storageVersion, 'v0')\n\n  switch (localStorageVersion) {\n    case 'v0':\n      migrateToV1()\n  }\n}\n","import { setStorageValue, StorageKey } from '../localStorageService'\n\nexport function migrateToV1(): void {\n  const wrongThemeSettingKey = 'sdh:theme-setting'\n  const themeSetting = localStorage.getItem(wrongThemeSettingKey)\n\n  if (themeSetting !== null) {\n    setStorageValue(StorageKey.themeSetting, themeSetting)\n    localStorage.removeItem(wrongThemeSettingKey)\n  }\n\n  setStorageValue(StorageKey.storageVersion, 'v1')\n}","import { createContext, Dispatch, SetStateAction, useState } from 'react'\nimport { loadHiddenLinks, saveHiddenLinks } from '../services/localStorage/values/hiddenLinks'\n\nexport interface HiddenLinksContextValue {\n  hiddenLinks: string[]\n  setHiddenLinks: Dispatch<SetStateAction<string[]>>\n  toggleHiddenLink: (url: string) => void\n}\n\nexport const HiddenLinksContext = createContext<HiddenLinksContextValue | null>(\n  null\n)\n\nexport function useHiddenLinksContextValue(): HiddenLinksContextValue {\n  const [hiddenLinks, setHiddenLinks] = useState<string[]>(loadHiddenLinks())\n\n  function toggleHiddenLink(urlToToggle: string): void {\n    const newHiddenLinks = hiddenLinks.includes(urlToToggle)\n      ? hiddenLinks.filter((url) => url !== urlToToggle)\n      : [...hiddenLinks, urlToToggle]\n    setHiddenLinks(newHiddenLinks)\n    saveHiddenLinks(newHiddenLinks)\n  }\n\n  return {\n    hiddenLinks,\n    setHiddenLinks,\n    toggleHiddenLink,\n  }\n}\n","import {\n  getStorageValue,\n  removeStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadHiddenLinks(): string[] {\n  const storageString = getStorageValue(StorageKey.hiddenItems)\n\n  if (storageString === null) {\n    return []\n  }\n\n  try {\n    const storageValue = JSON.parse(storageString)\n\n    if (!Array.isArray(storageValue)) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    if (storageValue.some((value) => typeof value !== 'string')) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    return storageValue\n  } catch {\n    removeStorageValue(StorageKey.hiddenItems)\n    return []\n  }\n}\n\nexport function saveHiddenLinks(values: string[]): void {\n  try {\n    const storageString = JSON.stringify(values)\n    setStorageValue(StorageKey.hiddenItems, storageString)\n  } catch {\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\n  }\n}\n","export function getIconUrl(icon: string): string {\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\n}\n","import { mdiLinkVariant } from '@mdi/js'\nimport React, { FC, memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\n\nexport const DefaultIcon: FC = memo(() => {\n  return (\n    <div className=\"default-icon\">\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\n    </div>\n  )\n})\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\nimport React, {\n  FC,\n  memo,\n  MouseEvent,\n  useCallback,\n  useContext,\n  useMemo\n} from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { HiddenLinksContext } from '../contexts/hiddenLinksContext'\nimport { classes } from '../utils/jsx'\nimport { getIconUrl } from '../utils/misc'\nimport { DefaultIcon } from './DefaultIcon'\nimport { MdiIcon } from './MdiIcon'\n\ninterface Props {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  searchable?: boolean\n  customize?: boolean\n  visible?: boolean\n  focus?: boolean\n}\n\nexport const Link: FC<Props> = memo(\n  ({\n    title,\n    url,\n    icon,\n    color,\n    searchable = false,\n    customize = false,\n    visible = true,\n    focus = false,\n  }) => {\n    const hiddenLinksContext = useContext(HiddenLinksContext)\n    const handleLinkClick = useCallback(\n      (event: MouseEvent<HTMLAnchorElement>): void => {\n        if (!customize) return\n        if (hiddenLinksContext === null) return\n\n        event.preventDefault()\n        hiddenLinksContext.toggleHiddenLink(url)\n      },\n      [customize, hiddenLinksContext, url]\n    )\n\n    const linkClasses = useMemo(\n      () => ({\n        link: true,\n        'link--is-visible': visible,\n        'link--has-focus': focus,\n      }),\n      [focus, visible]\n    )\n\n    if (!customize && !visible) {\n      return null\n    }\n\n    return (\n      <a\n        href={url}\n        rel=\"noreferrer\"\n        className={classes(linkClasses)}\n        onClick={handleLinkClick}\n      >\n        <div className=\"link__icon-container\" style={{ color }}>\n          {icon !== undefined ? (\n            <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\n          ) : (\n            <DefaultIcon />\n          )}\n        </div>\n\n        <div className=\"link__label\">{title}</div>\n\n        {searchable ? (\n          <div className=\"link__info\">\n            <span className=\"link__info-text\">\n              <kbd>Tab</kbd>: Search on site\n            </span>\n          </div>\n        ) : null}\n\n        {customize ? (\n          <div className=\"link__action\">\n            <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\n          </div>\n        ) : null}\n      </a>\n    )\n  }\n)\n","import React, { FC, memo } from 'react'\n\ninterface Props {\n  name: string\n}\n\nexport const LinkGroup: FC<Props> = memo(({ children, name }) => {\n  return (\n    <div className=\"link-group\">\n      <div className=\"link-group__name\">{name}</div>\n      <div className=\"link-group__list\">{children}</div>\n    </div>\n  )\n})\n","import React, { FC, memo, useCallback, useContext } from 'react'\nimport { AppMode, CurrentModeContext } from '../contexts/currentModeContext'\nimport { LinkGroup as ILinkGroup } from '../links'\nimport { Link } from './Link'\nimport { LinkGroup } from './LinkGroup'\n\ninterface Props {\n  links: ILinkGroup[]\n  hiddenLinks: string[]\n}\n\nexport const LinkList: FC<Props> = memo(({ links, hiddenLinks }) => {\n  const currentModeContext = useContext(CurrentModeContext)\n\n  if (currentModeContext === null) {\n    return null\n  }\n\n  const { isCurrentMode } = currentModeContext\n\n  const getLinkGroup = useCallback(\n    (group: ILinkGroup) => {\n      const noVisibleLinksInGroup = group.items.every((link) =>\n        hiddenLinks.includes(link.url)\n      )\n\n      if (noVisibleLinksInGroup && isCurrentMode(AppMode.customize)) {\n        return null\n      }\n\n      return (\n        <LinkGroup key={group.name} name={group.name}>\n          {group.items.map((link) => (\n            <Link\n              key={link.url}\n              title={link.title}\n              url={link.url}\n              icon={link.icon}\n              color={link.color}\n              customize={isCurrentMode(AppMode.customize)}\n              visible={!hiddenLinks.includes(link.url)}\n            />\n          ))}\n        </LinkGroup>\n      )\n    },\n    [hiddenLinks, isCurrentMode]\n  )\n\n  return <>{links.map(getLinkGroup)}</>\n})\n","import linksData from './links.json'\nimport { OptionalExceptFor } from './utilityTypes'\n\nexport interface LinkItem {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  iconComp?: JSX.Element\n  searchUrl?: string\n  searchConcat?: string\n}\n\nexport type SearchTarget = OptionalExceptFor<\n  LinkItem,\n  'title' | 'url' | 'searchUrl'\n>\n\nexport interface LinkGroup {\n  name: string\n  items: LinkItem[]\n}\n\nexport interface Links {\n  items: LinkGroup[]\n}\n\nexport const links: Links = {\n  items: linksData.items,\n}\n\nexport function getAllLinks(): LinkItem[] {\n  return links.items.flatMap((group) => group.items)\n}\n","import React, { FC, memo, useCallback } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { LinkItem } from '../links'\nimport { getIconUrl } from '../utils/misc'\n\ninterface Props {\n  title: LinkItem['title']\n  icon: LinkItem['icon']\n  color: LinkItem['color']\n}\n\nexport const SearchTargetItem: FC<Props> = memo(function SearchTargetItem({\n  title,\n  icon,\n  color,\n}) {\n  const getIcon = useCallback(() => {\n    if (icon === undefined) {\n      return null\n    }\n\n    const iconUrl = getIconUrl(icon)\n\n    return (\n      <span className=\"search-target-item__icon-container\" style={{ color }}>\n        <ReactSVG src={iconUrl} className=\"search-target-item__icon\" />\n      </span>\n    )\n  }, [color, icon])\n\n  return (\n    <div className=\"search-target-item\">\n      Search on {getIcon()} {title}:\n    </div>\n  )\n})\n","import fuzzy from 'fuzzysort'\nimport React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  KeyboardEvent as ReactKeyboardEvent,\n  memo,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { AppMode, CurrentModeContext } from '../contexts/currentModeContext'\nimport { HiddenLinksContext } from '../contexts/hiddenLinksContext'\nimport { getAllLinks, LinkItem, SearchTarget } from '../links'\nimport { Link } from './Link'\nimport { SearchTargetItem } from './SearchTargetItem'\n\ninterface Props {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nexport const Search: FC<Props> = memo(({ searchTerm, setSearchTerm }) => {\n  const {\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  } = useSearch(searchTerm, setSearchTerm)\n\n  const currentModeContext = useContext(CurrentModeContext)\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  })\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void => {\n      setSearchTerm(event.target.value)\n      setKeyboardIndex(0)\n    },\n    [setKeyboardIndex, setSearchTerm]\n  )\n\n  const handleInputKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLInputElement>): void => {\n      switch (event.key) {\n        case 'Backspace': {\n          if (searchTerm !== '') {\n            return\n          }\n\n          if (searchTarget !== null) {\n            setSearchTarget(null)\n          } else {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'Tab': {\n          event.preventDefault()\n\n          if (searchTarget !== null) {\n            return\n          }\n          if (focusedResult === null) {\n            return\n          }\n          if (focusedResult.obj.searchUrl === undefined) {\n            return\n          }\n\n          setSearchTarget(focusedResult.obj as SearchTarget)\n          setSearchTerm('')\n          break\n        }\n\n        case 'Enter': {\n          const url = getUrl(\n            focusedResult?.obj ?? null,\n            searchTarget,\n            searchTerm\n          )\n\n          if (url === null) {\n            return\n          }\n\n          if (event.ctrlKey) {\n            window.open(url, '', 'alwaysRaised=on')\n          } else {\n            window.location.href = url\n          }\n\n          if (event.ctrlKey || event.shiftKey) {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'ArrowUp': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.max(0, keyboardIndex - 1))\n          break\n        }\n\n        case 'ArrowDown': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\n        }\n      }\n    },\n    [\n      currentModeContext,\n      focusedResult,\n      keyboardIndex,\n      results,\n      searchTarget,\n      searchTerm,\n      setKeyboardIndex,\n      setSearchTarget,\n      setSearchTerm,\n    ]\n  )\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (searchTarget !== null) {\n          setSearchTarget(null)\n          setSearchTerm('')\n          return\n        }\n\n        currentModeContext?.setCurrentMode(AppMode.default)\n      }\n    },\n    [currentModeContext, searchTarget, setSearchTarget, setSearchTerm]\n  )\n\n  const hints = useMemo(\n    () => (\n      <>\n        <div className=\"search__results-hint\">Type ahead to filter links.</div>\n        <div className=\"search__results-hint\">\n          <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">Open link</div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (background)\n          </div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (foreground)\n          </div>\n        </div>\n      </>\n    ),\n    []\n  )\n\n  const resultElements = useMemo(\n    () => (\n      <>\n        {results !== null && results.total > 0 ? (\n          results.map((link) => (\n            <Link\n              key={link.obj.url}\n              title={link.obj.title}\n              url={link.obj.url}\n              icon={link.obj.icon}\n              searchable={link.obj.searchUrl !== undefined}\n              color={link.obj.color}\n              customize={false}\n              visible={true}\n              focus={link === focusedResult}\n            />\n          ))\n        ) : (\n          <div className=\"search__results-hint\">No results found...</div>\n        )}\n      </>\n    ),\n    [focusedResult, results]\n  )\n\n  return (\n    <div className=\"search\">\n      {searchTarget !== null ? (\n        <SearchTargetItem\n          title={searchTarget.title}\n          icon={searchTarget.icon}\n          color={searchTarget.color}\n        />\n      ) : null}\n\n      <input\n        className=\"search__input\"\n        autoFocus\n        type=\"text\"\n        value={searchTerm}\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\n        onChange={handleInputChange}\n        onKeyDown={handleInputKeyDown}\n      />\n\n      <div className=\"search__results\">\n        {searchTarget === null\n          ? searchTerm === ''\n            ? hints\n            : resultElements\n          : null}\n      </div>\n    </div>\n  )\n})\n\ninterface UseSearch {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n  searchTarget: SearchTarget | null\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\n  keyboardIndex: number\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\n  results: Fuzzysort.KeyResults<LinkItem> | null\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\n}\n\nfunction useSearch(\n  searchTerm: string,\n  setSearchTerm: Dispatch<SetStateAction<string>>\n): UseSearch {\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n\n  const visibleLinks = useMemo(() => {\n    if (hiddenLinksContext === null) {\n      return null\n    }\n\n    return getAllLinks().filter(\n      (link) => !hiddenLinksContext.hiddenLinks.includes(link.url)\n    )\n  }, [hiddenLinksContext])\n\n  const fuzzyOptions: Fuzzysort.KeyOptions = useMemo(\n    () => ({ key: 'title', allowTypo: false, limit: 6 }),\n    []\n  )\n\n  const results = useMemo(() => {\n    if (visibleLinks === null) return null\n    if (searchTerm === '') return null\n    if (searchTarget !== null) return null\n\n    return fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\n  }, [fuzzyOptions, searchTarget, searchTerm, visibleLinks])\n\n  const focusedResult = useMemo(() => results?.[keyboardIndex] ?? null, [\n    keyboardIndex,\n    results,\n  ])\n\n  useLayoutEffect(() => {\n    setSearchTerm('')\n    return () => {\n      setSearchTerm('')\n    }\n  }, [setSearchTerm])\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  }\n}\n\nfunction getUrl(\n  focusedItem: LinkItem | null,\n  searchTarget?: SearchTarget | null,\n  searchTerm?: string\n): string | null {\n  if (\n    searchTarget !== null &&\n    searchTarget !== undefined &&\n    searchTerm !== undefined &&\n    searchTerm !== ''\n  ) {\n    const concatChar = searchTarget.searchConcat ?? '+'\n    const encodedSearchTerm = searchTerm.replace(/ /g, concatChar)\n    return searchTarget.searchUrl.replace(/\\{search\\}/, encodedSearchTerm)\n  }\n\n  if (focusedItem !== null) {\n    return focusedItem.url\n  }\n\n  return null\n}\n","import {\n  mdiFormatListChecks,\n  mdiMagnify,\n  mdiThemeLightDark,\n  mdiWeatherNight,\n  mdiWeatherSunny\n} from '@mdi/js'\nimport React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { version } from '../package.json'\nimport { AppAction } from './components/AppAction'\nimport { AppActions } from './components/AppActions'\nimport { AppContent } from './components/AppContent'\nimport { AppFooter } from './components/AppFooter'\nimport { AppHeader } from './components/AppHeader'\nimport { FooterDivider } from './components/FooterDivider'\nimport { FooterGroup } from './components/FooterGroup'\nimport { FooterLink } from './components/FooterLink'\nimport { LinkList } from './components/LinkList'\nimport { Search } from './components/Search'\nimport {\n  AppMode,\n  CurrentModeContext,\n  CurrentModeContextValue,\n  useCurrentModeContextValue\n} from './contexts/currentModeContext'\nimport {\n  HiddenLinksContext,\n  useHiddenLinksContextValue\n} from './contexts/hiddenLinksContext'\nimport { links } from './links'\nimport {\n  loadThemeSetting,\n  saveThemeSetting\n} from './services/localStorage/values/themeSetting'\n\nexport const WebdevHome: FC = () => {\n  const currentModeContextValue = useCurrentModeContextValue()\n  const hiddenLinksContextValue = useHiddenLinksContextValue()\n\n  const customizeMode = useCustomizeMode({ currentModeContextValue })\n  const searchMode = useSearchMode({ currentModeContextValue })\n  const themeSwitcher = useThemeSwitcher()\n\n  const { isCurrentMode } = currentModeContextValue\n  const { hiddenLinks } = hiddenLinksContextValue\n\n  return (\n    <CurrentModeContext.Provider value={currentModeContextValue}>\n      <HiddenLinksContext.Provider value={hiddenLinksContextValue}>\n        <div className=\"app\">\n          <AppHeader />\n\n          <AppActions>\n            <AppAction\n              icon={mdiMagnify}\n              action={searchMode.handleSearchAction}\n              active={isCurrentMode(AppMode.search)}\n            />\n            <AppAction\n              icon={themeSwitcher.icon}\n              action={themeSwitcher.switchTheme}\n              active={false}\n            />\n            <AppAction\n              icon={mdiFormatListChecks}\n              action={customizeMode.handleCustomizeAction}\n              active={isCurrentMode(AppMode.customize)}\n            />\n          </AppActions>\n\n          {isCurrentMode(AppMode.default, AppMode.customize) ? (\n            <AppContent>\n              <LinkList links={links.items} hiddenLinks={hiddenLinks} />\n            </AppContent>\n          ) : (\n            <Search\n              searchTerm={searchMode.searchTerm}\n              setSearchTerm={searchMode.setSearchTerm}\n            />\n          )}\n\n          <AppFooter>\n            <FooterGroup title={'WebdevHome v' + version}>\n              <FooterLink\n                text=\"Changelog\"\n                url=\"https://github.com/webdevhome/webdevhome.github.io/releases\"\n              />\n              <FooterLink\n                text=\"GitHub\"\n                url=\"https://github.com/webdevhome/webdevhome.github.io\"\n              />\n            </FooterGroup>\n\n            <FooterDivider />\n\n            <FooterGroup title=\"Icons\">\n              <FooterLink\n                text=\"Material Design Icons\"\n                url=\"https://materialdesignicons.com\"\n              />\n              <FooterLink text=\"Simple Icons\" url=\"https://simpleicons.org/\" />\n            </FooterGroup>\n          </AppFooter>\n        </div>\n      </HiddenLinksContext.Provider>\n    </CurrentModeContext.Provider>\n  )\n}\n\n// #region customize feature\ninterface UseCustomizeModeParams {\n  currentModeContextValue: CurrentModeContextValue\n}\n\ninterface UseCustomizeModeReturn {\n  handleCustomizeAction: () => void\n}\n\nfunction useCustomizeMode({\n  currentModeContextValue,\n}: UseCustomizeModeParams): UseCustomizeModeReturn {\n  const { isCurrentMode, setCurrentMode, toggleMode } = currentModeContextValue\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGlobalKeydown)\n\n    function handleGlobalKeydown(event: KeyboardEvent): void {\n      if (event.key === 'Escape' && isCurrentMode(AppMode.customize)) {\n        setCurrentMode(AppMode.default)\n      }\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleGlobalKeydown)\n    }\n  }, [isCurrentMode, setCurrentMode])\n\n  const handleCustomizeAction = useCallback((): void => {\n    toggleMode(AppMode.customize)\n  }, [toggleMode])\n\n  return { handleCustomizeAction }\n}\n// #endregion customize feature\n\n// #region search feature\ninterface UseSearchModeParams {\n  currentModeContextValue: CurrentModeContextValue\n}\n\ninterface UseSearchModeReturn {\n  handleSearchAction: () => void\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nfunction useSearchMode({\n  currentModeContextValue,\n}: UseSearchModeParams): UseSearchModeReturn {\n  const [searchTerm, setSearchTerm] = useState<string>('')\n\n  const { isCurrentMode, setCurrentMode, toggleMode } = currentModeContextValue\n\n  const handleGlobalKeypress = useCallback(\n    (event: KeyboardEvent) => {\n      if (isCurrentMode(AppMode.default)) {\n        if (event.key === '\\n') {\n          return\n        }\n\n        setSearchTerm(event.key)\n        setCurrentMode(AppMode.search)\n      }\n    },\n    [isCurrentMode, setCurrentMode]\n  )\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleGlobalKeypress)\n\n    return () => {\n      window.removeEventListener('keypress', handleGlobalKeypress)\n    }\n  }, [handleGlobalKeypress, isCurrentMode, setCurrentMode])\n\n  const handleSearchAction = useCallback((): void => {\n    setSearchTerm('')\n    toggleMode(AppMode.search)\n  }, [toggleMode])\n\n  return { handleSearchAction, searchTerm, setSearchTerm }\n}\n// #endregion search feature\n\n// #region theme switcher\nexport const themeStates = ['auto', 'light', 'dark'] as const\nexport type ThemeState = typeof themeStates[number]\n\ninterface UseThemeSwitcherReturn {\n  icon: string\n  switchTheme: () => void\n}\n\nfunction useThemeSwitcher(): UseThemeSwitcherReturn {\n  const [themeState, setThemeState] = useState<ThemeState>(loadThemeSetting())\n\n  const bodyElement = useMemo(\n    () => globalThis.document.getElementsByTagName('body')[0],\n    []\n  )\n\n  useEffect(() => {\n    saveThemeSetting(themeState)\n    bodyElement.className = `${themeState}-theme`\n  }, [bodyElement.className, themeState])\n\n  const icon = useMemo((): string => {\n    if (themeState === 'light') {\n      return mdiWeatherSunny\n    }\n    if (themeState === 'dark') {\n      return mdiWeatherNight\n    }\n    return mdiThemeLightDark\n  }, [themeState])\n\n  const switchTheme = useCallback((): void => {\n    switch (themeState) {\n      case 'light':\n        setThemeState('dark')\n        break\n      case 'dark':\n        setThemeState('auto')\n        break\n      default:\n        setThemeState('light')\n        break\n    }\n  }, [themeState])\n\n  return { icon, switchTheme }\n}\n// #endregion theme switcher\n","import { ThemeState } from '../../../App'\nimport {\n  getStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadThemeSetting(): ThemeState {\n  const value = getStorageValue(StorageKey.themeSetting)\n\n  if (value === null) return 'auto'\n  if (value !== 'auto' && value !== 'light' && value !== 'dark') return 'auto'\n\n  return value\n}\n\nexport function saveThemeSetting(value: ThemeState): void {\n  setStorageValue(StorageKey.themeSetting, value)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { WebdevHome } from './App'\nimport './sass/index.scss'\n\nReactDOM.render(<WebdevHome />, document.getElementById('root'))\n"],"sourceRoot":""}