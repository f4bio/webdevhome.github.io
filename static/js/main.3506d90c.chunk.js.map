{"version":3,"sources":["utils/jsx.ts","stores/currentModeStore.ts","components/MdiIcon.tsx","components/AppAction.tsx","components/AppActions.tsx","components/AppContent.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/FooterDivider.tsx","components/FooterGroup.tsx","components/FooterLink.tsx","services/localStorageService.ts","stores/hiddenLinksStore.ts","utils/misc.ts","components/DefaultIcon.tsx","components/Link.tsx","components/LinkGroup.tsx","components/LinkList.tsx","links.ts","components/SearchTargetItem.tsx","components/Search.tsx","App.tsx","index.tsx"],"names":["classes","classesObject","result","Object","entries","className","push","join","AppMode","MdiIcon","memo","path","color","iconStyle","useMemo","width","height","Icon","style","AppAction","icon","action","active","actionClasses","onClick","AppActions","children","AppContent","AppFooter","AppHeader","FooterDivider","FooterGroup","title","FooterLink","text","url","href","initialState","mode","default","currentModeStore","createStore","useCurrentMode","createReactHook","setMode","set","toggleMode","state","setHiddenLinks","values","storageString","JSON","stringify","localStorage","setItem","Error","links","key","getItem","storageValue","parse","Array","isArray","some","value","removeItem","getHiddenLinks","hiddenLinksStore","useHiddenLinks","mutations","link","concat","filter","it","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","searchable","customize","visible","focus","handleLinkClick","useCallback","event","preventDefault","includes","toggleLink","linkClasses","rel","undefined","src","mdiEye","mdiEyeOff","LinkGroup","name","LinkList","hiddenLinks","getLinkGroup","group","items","every","map","SearchTargetItem","getIcon","iconUrl","Search","searchTerm","setSearchTerm","useState","keyboardIndex","setKeyboardIndex","searchTarget","setSearchTarget","inputElement","useRef","visibleLinks","flatMap","fuzzyOptions","allowTypo","limit","results","fuzzy","go","focusedResult","useEffect","current","useSearch","window","addEventListener","handleGlobalKeyDown","removeEventListener","handleInputChange","currentTarget","handleInputKeyDown","obj","searchUrl","focusedItem","concatChar","searchConcat","encodedSearchTerm","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","total","hints","resultElements","ref","type","placeholder","onChange","onKeyDown","WebdevHome","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeMode","handleGlobalKeypress","search","handleSearchAction","useSearchMode","getThemeStateSetting","themeState","setThemeState","bodyElement","globalThis","getElementsByTagName","themeSwitcherIcon","mdiWeatherSunny","mdiWeatherNight","mdiThemeLightDark","handleThemeSwitcherAction","useThemeSwitcher","mdiMagnify","mdiFormatListChecks","version","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3506d90c.chunk.js","sourcesContent":["export function classes(classesObject: Record<string, boolean>): string {\n  const result: string[] = []\n\n  for (const [className, condition] of Object.entries(classesObject)) {\n    if (condition === true) {\n      result.push(className)\n    }\n  }\n\n  return result.join(' ')\n}\n","import { createReactHook, createStore } from '@alinnert/tstate'\n\nexport enum AppMode {\n  'default',\n  'search',\n  'customize',\n}\n\ninterface CurrentMode {\n  mode: AppMode\n}\n\nconst initialState: CurrentMode = {\n  mode: AppMode.default,\n}\n\nconst currentModeStore = createStore<CurrentMode>(initialState)\nexport const useCurrentMode = createReactHook(currentModeStore)\n\nexport function setMode(mode: AppMode): void {\n  currentModeStore.set({ mode })\n}\n\nexport function toggleMode(mode: AppMode): void {\n  currentModeStore.set({\n    mode: currentModeStore.state.mode === mode ? AppMode.default : mode,\n  })\n}\n","import { Icon } from '@mdi/react'\nimport React, { FC, memo, useMemo } from 'react'\n\ninterface Props {\n  path: string\n  className?: string\n  color?: string\n}\n\nexport const MdiIcon: FC<Props> = memo(({ className, path, color }) => {\n  const iconStyle = useMemo(() => ({ width: 24, height: 24 }), [])\n\n  return (\n    <Icon className={className} path={path} style={iconStyle} color={color} />\n  )\n})\n","import React, { FC, memo, useMemo } from 'react'\nimport { classes } from '../utils/jsx'\nimport { MdiIcon } from './MdiIcon'\n\ninterface Props {\n  icon: string\n  active: boolean\n  action: () => void\n}\n\nexport const AppAction: FC<Props> = memo(({ icon, action, active }) => {\n  const actionClasses = useMemo(\n    () => ({\n      'app-action': true,\n      'app-action--is-active': active,\n    }),\n    [active]\n  )\n\n  return (\n    <div className={classes(actionClasses)} onClick={action}>\n      <MdiIcon path={icon} />\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppActions: FC = memo(({ children }) => {\n  return <div className=\"app-actions\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppContent: FC = memo(({ children }) => {\n  return <div className=\"app-content\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppFooter: FC = memo(({ children }) => {\n  return <div className=\"app-footer\">{children}</div>\n})\n","import React, { FC, memo } from 'react'\n\nexport const AppHeader: FC = memo(() => {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header__logo logo\">\n        <span className=\"logo__shape\">&lt;</span>\n        <span className=\"logo__char-1\">Webdev</span>\n        <span className=\"logo__char-2\">Home</span>\n        <span className=\"logo__shape\"> /&gt;</span>\n      </div>\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\nexport const FooterDivider: FC = memo(() => {\n  return <div className=\"footer-divider\"></div>\n})\n","import React, { memo, ReactNode } from 'react'\n\ninterface Props {\n  children?: ReactNode\n  title: string\n}\n\nexport const FooterGroup = memo(function FooterGroup({\n  children,\n  title,\n}: Props) {\n  return (\n    <div className=\"footer-group\">\n      <div className=\"footer-group__title\">{title}</div>\n      {children}\n    </div>\n  )\n})\n","import React, { FC, memo } from 'react'\n\ninterface Props {\n  text: string\n  url: string\n}\n\nexport const FooterLink: FC<Props> = memo(({ text, url }) => {\n  return (\n    <a href={url} className=\"footer-link\">\n      {text}\n    </a>\n  )\n})\n","import { ThemeState } from '../App'\n\ntype StorageKey = 'wdh:hidden-items' | 'sdh:theme-setting'\n\nexport function getHiddenLinks(): string[] {\n  const key: StorageKey = 'wdh:hidden-items'\n  const storageString = localStorage.getItem(key)\n\n  if (storageString === null) {\n    return []\n  }\n\n  try {\n    const storageValue = JSON.parse(storageString)\n\n    if (!Array.isArray(storageValue)) {\n      localStorage.removeItem(key)\n      return []\n    }\n\n    if (storageValue.some((value) => typeof value !== 'string')) {\n      localStorage.removeItem(key)\n      return []\n    }\n\n    return storageValue\n  } catch {\n    localStorage.removeItem(key)\n    return []\n  }\n}\n\nexport function setHiddenLinks(values: string[]): void {\n  const key: StorageKey = 'wdh:hidden-items'\n\n  try {\n    const storageString = JSON.stringify(values)\n    localStorage.setItem(key, storageString)\n  } catch {\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\n  }\n}\n\nexport function getThemeStateSetting(): ThemeState {\n  const key: StorageKey = 'sdh:theme-setting'\n  const storageString = localStorage.getItem(key)\n\n  if (storageString === null) {\n    return 'auto'\n  }\n  if (\n    storageString !== 'auto' &&\n    storageString !== 'light' &&\n    storageString !== 'dark'\n  ) {\n    return 'auto'\n  }\n\n  return storageString\n}\n\nexport function setThemeStateSetting(value: ThemeState): void {\n  const key: StorageKey = 'sdh:theme-setting'\n\n  localStorage.setItem(key, value)\n}\n","import { createReactHook, createStore } from '@alinnert/tstate'\nimport { getHiddenLinks, setHiddenLinks } from '../services/localStorageService'\n\n// #region store\nexport interface HiddenLinks {\n  links: string[]\n}\n\nconst initialState: HiddenLinks = {\n  links: getHiddenLinks(),\n}\n\nconst hiddenLinksStore = createStore<HiddenLinks>(initialState)\nexport const useHiddenLinks = createReactHook(hiddenLinksStore)\n// #endregion store\n\n// #region mutations\nconst mutations = {\n  addUrl: (link: string): void => {\n    const links = hiddenLinksStore.state.links.concat(link)\n    hiddenLinksStore.set({ links })\n    setHiddenLinks(links)\n  },\n\n  removeUrl: (link: string): void => {\n    const links = hiddenLinksStore.state.links.filter((it) => it !== link)\n    hiddenLinksStore.set({ links })\n    setHiddenLinks(links)\n  },\n}\n// #endregion mutations\n\n// #region actions\nexport function toggleLink(url: string): void {\n  if (hiddenLinksStore.state.links.includes(url)) {\n    mutations.removeUrl(url)\n  } else {\n    mutations.addUrl(url)\n  }\n}\n// #endregion actions\n","export function getIconUrl(icon: string): string {\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\n}\n","import { mdiLinkVariant } from '@mdi/js'\nimport React, { FC, memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\n\nexport const DefaultIcon: FC = memo(() => {\n  return (\n    <div className=\"default-icon\">\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\n    </div>\n  )\n})\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\nimport React, { FC, memo, MouseEvent, useCallback, useMemo } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { toggleLink } from '../stores/hiddenLinksStore'\nimport { classes } from '../utils/jsx'\nimport { getIconUrl } from '../utils/misc'\nimport { DefaultIcon } from './DefaultIcon'\nimport { MdiIcon } from './MdiIcon'\n\ninterface Props {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  searchable?: boolean\n  customize?: boolean\n  visible?: boolean\n  focus?: boolean\n}\n\nexport const Link: FC<Props> = memo(\n  ({\n    title,\n    url,\n    icon,\n    color,\n    searchable = false,\n    customize = false,\n    visible = true,\n    focus = false,\n  }) => {\n    const handleLinkClick = useCallback(\n      (event: MouseEvent<HTMLAnchorElement>): void => {\n        if (customize) {\n          event.preventDefault()\n          toggleLink(url)\n        }\n      },\n      [customize, url]\n    )\n\n    const linkClasses = useMemo(\n      () => ({\n        link: true,\n        'link--is-visible': visible,\n        'link--has-focus': focus,\n      }),\n      [focus, visible]\n    )\n\n    if (!customize && !visible) {\n      return null\n    }\n\n    return (\n      <a\n        href={url}\n        rel=\"noreferrer\"\n        className={classes(linkClasses)}\n        onClick={handleLinkClick}\n      >\n        <div className=\"link__icon-container\" style={{ color }}>\n          {icon !== undefined ? (\n            <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\n          ) : (\n            <DefaultIcon />\n          )}\n        </div>\n\n        <div className=\"link__label\">{title}</div>\n\n        {searchable ? (\n          <div className=\"link__info\">\n            <span className=\"link__info-text\">\n              <kbd>Tab</kbd>: Search on site\n            </span>\n          </div>\n        ) : null}\n\n        {customize ? (\n          <div className=\"link__action\">\n            <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\n          </div>\n        ) : null}\n      </a>\n    )\n  }\n)\n","import React, { FC, memo } from 'react'\n\ninterface Props {\n  name: string\n}\n\nexport const LinkGroup: FC<Props> = memo(({ children, name }) => {\n  return (\n    <div className=\"link-group\">\n      <div className=\"link-group__name\">{name}</div>\n      <div className=\"link-group__list\">{children}</div>\n    </div>\n  )\n})\n","import React, { FC, memo, useCallback } from 'react'\nimport { LinkGroup as ILinkGroup } from '../links'\nimport { AppMode, useCurrentMode } from '../stores/currentModeStore'\nimport { Link } from './Link'\nimport { LinkGroup } from './LinkGroup'\n\ninterface Props {\n  links: ILinkGroup[]\n  hiddenLinks: string[]\n}\n\nexport const LinkList: FC<Props> = memo(({ links, hiddenLinks }) => {\n  const { mode } = useCurrentMode()\n\n  const getLinkGroup = useCallback(\n    (group: ILinkGroup) => {\n      const noVisibleLinksInGroup = group.items.every((link) =>\n        hiddenLinks.includes(link.url)\n      )\n\n      if (noVisibleLinksInGroup && mode !== AppMode.customize) {\n        return null\n      }\n\n      return (\n        <LinkGroup key={group.name} name={group.name}>\n          {group.items.map((link) => (\n            <Link\n              key={link.url}\n              title={link.title}\n              url={link.url}\n              icon={link.icon}\n              color={link.color}\n              customize={mode === AppMode.customize}\n              visible={!hiddenLinks.includes(link.url)}\n            />\n          ))}\n        </LinkGroup>\n      )\n    },\n    [hiddenLinks, mode]\n  )\n\n  return <>{links.map(getLinkGroup)}</>\n})\n","import linksData from './links.json'\nimport { OptionalExceptFor } from './utilityTypes'\n\nexport interface LinkItem {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  iconComp?: JSX.Element\n  searchUrl?: string\n  searchConcat?: string\n}\n\nexport type SearchTarget = OptionalExceptFor<\n  LinkItem,\n  'title' | 'url' | 'searchUrl'\n>\n\nexport interface LinkGroup {\n  name: string\n  items: LinkItem[]\n}\n\nexport interface Links {\n  items: LinkGroup[]\n}\n\nexport const links: Links = {\n  items: linksData.items,\n}\n\nexport function getAllLinks(): LinkItem[] {\n  return links.items.flatMap((group) => group.items)\n}\n","import React, { FC, memo, useCallback } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { LinkItem } from '../links'\nimport { getIconUrl } from '../utils/misc'\n\ninterface Props {\n  title: LinkItem['title']\n  icon: LinkItem['icon']\n  color: LinkItem['color']\n}\n\nexport const SearchTargetItem: FC<Props> = memo(function SearchTargetItem({\n  title,\n  icon,\n  color,\n}) {\n  const getIcon = useCallback(() => {\n    if (icon === undefined) {\n      return null\n    }\n\n    const iconUrl = getIconUrl(icon)\n\n    return (\n      <span className=\"search-target-item__icon-container\" style={{ color }}>\n        <ReactSVG src={iconUrl} className=\"search-target-item__icon\" />\n      </span>\n    )\n  }, [color, icon])\n\n  return (\n    <div className=\"search-target-item\">\n      Search on {getIcon()} {title}:\n    </div>\n  )\n})\n","import fuzzy from 'fuzzysort'\nimport React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  KeyboardEvent as ReactKeyboardEvent,\n  memo,\n  RefObject,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\nimport { getAllLinks, LinkItem, SearchTarget } from '../links'\nimport { AppMode, setMode } from '../stores/currentModeStore'\nimport { useHiddenLinks } from '../stores/hiddenLinksStore'\nimport { Link } from './Link'\nimport { SearchTargetItem } from './SearchTargetItem'\n\ninterface Props {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nexport const Search: FC<Props> = memo(({ searchTerm, setSearchTerm }) => {\n  const {\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n    inputElement,\n  } = useSearch(searchTerm, setSearchTerm)\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  })\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void => {\n      setSearchTerm(event.currentTarget.value)\n      setKeyboardIndex(0)\n    },\n    [setKeyboardIndex, setSearchTerm]\n  )\n\n  const handleInputKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLInputElement>): void => {\n      switch (event.key) {\n        case 'Backspace': {\n          if (searchTerm !== '') {\n            return\n          }\n\n          if (searchTarget !== null) {\n            setSearchTarget(null)\n          } else {\n            setMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'Tab': {\n          event.preventDefault()\n\n          if (searchTarget !== null) {\n            return\n          }\n          if (focusedResult === null) {\n            return\n          }\n          if (focusedResult.obj.searchUrl === undefined) {\n            return\n          }\n\n          setSearchTarget(focusedResult.obj as SearchTarget)\n          setSearchTerm('')\n          break\n        }\n\n        case 'Enter': {\n          const url = getUrl(\n            focusedResult?.obj ?? null,\n            searchTarget,\n            searchTerm\n          )\n\n          if (url === null) {\n            return\n          }\n\n          if (event.ctrlKey) {\n            window.open(url, '', 'alwaysRaised=on')\n          } else {\n            window.location.href = url\n          }\n\n          if (event.ctrlKey || event.shiftKey) {\n            setMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'ArrowUp': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.max(0, keyboardIndex - 1))\n          break\n        }\n\n        case 'ArrowDown': {\n          if (results === null) {\n            return\n          }\n          event.preventDefault()\n          setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\n        }\n      }\n    },\n    [\n      focusedResult,\n      keyboardIndex,\n      results,\n      searchTarget,\n      searchTerm,\n      setKeyboardIndex,\n      setSearchTarget,\n      setSearchTerm,\n    ]\n  )\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (searchTarget !== null) {\n          setSearchTarget(null)\n          setSearchTerm('')\n          return\n        }\n\n        setMode(AppMode.default)\n      }\n    },\n    [searchTarget, setSearchTarget, setSearchTerm]\n  )\n\n  const hints = useMemo(\n    () => (\n      <>\n        <div className=\"search__results-hint\">Type ahead to filter links.</div>\n        <div className=\"search__results-hint\">\n          <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">Open link</div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (background)\n          </div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (foreground)\n          </div>\n        </div>\n      </>\n    ),\n    []\n  )\n\n  const resultElements = useMemo(\n    () => (\n      <>\n        {results !== null && results.total > 0 ? (\n          results.map((link) => (\n            <Link\n              key={link.obj.url}\n              title={link.obj.title}\n              url={link.obj.url}\n              icon={link.obj.icon}\n              searchable={link.obj.searchUrl !== undefined}\n              color={link.obj.color}\n              customize={false}\n              visible={true}\n              focus={link === focusedResult}\n            />\n          ))\n        ) : (\n          <div className=\"search__results-hint\">No results found...</div>\n        )}\n      </>\n    ),\n    [focusedResult, results]\n  )\n\n  return (\n    <div className=\"search\">\n      {searchTarget !== null ? (\n        <SearchTargetItem\n          title={searchTarget.title}\n          icon={searchTarget.icon}\n          color={searchTarget.color}\n        />\n      ) : null}\n\n      <input\n        className=\"search__input\"\n        ref={inputElement}\n        type=\"text\"\n        value={searchTerm}\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\n        onChange={handleInputChange}\n        onKeyDown={handleInputKeyDown}\n      />\n\n      <div className=\"search__results\">\n        {searchTarget === null\n          ? searchTerm === ''\n            ? hints\n            : resultElements\n          : null}\n      </div>\n    </div>\n  )\n})\n\ninterface UseSearch {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n  searchTarget: SearchTarget | null\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\n  keyboardIndex: number\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\n  results: Fuzzysort.KeyResults<LinkItem> | null\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\n  inputElement: RefObject<HTMLInputElement>\n}\n\nfunction useSearch(\n  searchTerm: string,\n  setSearchTerm: Dispatch<SetStateAction<string>>\n): UseSearch {\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\n  const inputElement = useRef<HTMLInputElement>(null)\n  const { links } = useHiddenLinks()\n\n  const visibleLinks = useMemo(\n    () => getAllLinks().filter((link) => !links.includes(link.url)),\n    [links]\n  )\n\n  const fuzzyOptions: Fuzzysort.KeyOptions = useMemo(\n    () => ({ key: 'title', allowTypo: false, limit: 6 }),\n    []\n  )\n\n  const results = useMemo(\n    () =>\n      searchTerm !== '' && searchTarget === null\n        ? fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\n        : null,\n    [fuzzyOptions, searchTarget, searchTerm, visibleLinks]\n  )\n\n  const focusedResult = useMemo(() => results?.[keyboardIndex] ?? null, [\n    keyboardIndex,\n    results,\n  ])\n\n  useEffect(() => {\n    setSearchTerm('')\n    inputElement.current?.focus()\n  }, [setSearchTerm])\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n    inputElement,\n  }\n}\n\nfunction getUrl(\n  focusedItem: LinkItem | null,\n  searchTarget?: SearchTarget | null,\n  searchTerm?: string\n): string | null {\n  if (\n    searchTarget !== null &&\n    searchTarget !== undefined &&\n    searchTerm !== undefined &&\n    searchTerm !== ''\n  ) {\n    const concatChar = searchTarget.searchConcat ?? '+'\n    const encodedSearchTerm = searchTerm.replace(/ /g, concatChar)\n    return searchTarget.searchUrl.replace(/\\{search\\}/, encodedSearchTerm)\n  }\n\n  if (focusedItem !== null) {\n    return focusedItem.url\n  }\n\n  return null\n}\n","import {\n  mdiFormatListChecks,\n  mdiMagnify,\n  mdiThemeLightDark,\n  mdiWeatherNight,\n  mdiWeatherSunny\n} from '@mdi/js'\nimport React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { version } from '../package.json'\nimport { AppAction } from './components/AppAction'\nimport { AppActions } from './components/AppActions'\nimport { AppContent } from './components/AppContent'\nimport { AppFooter } from './components/AppFooter'\nimport { AppHeader } from './components/AppHeader'\nimport { FooterDivider } from './components/FooterDivider'\nimport { FooterGroup } from './components/FooterGroup'\nimport { FooterLink } from './components/FooterLink'\nimport { LinkList } from './components/LinkList'\nimport { Search } from './components/Search'\nimport { links } from './links'\nimport {\n  getThemeStateSetting,\n  setThemeStateSetting\n} from './services/localStorageService'\nimport {\n  AppMode,\n  setMode,\n  toggleMode,\n  useCurrentMode\n} from './stores/currentModeStore'\nimport { HiddenLinks, useHiddenLinks } from './stores/hiddenLinksStore'\n\nexport const WebdevHome: FC = () => {\n  const { mode } = useCurrentMode()\n  const { handleCustomizeAction, hiddenLinks } = useCustomizeMode()\n  const { handleSearchAction, searchTerm, setSearchTerm } = useSearchMode()\n  const { themeSwitcherIcon, handleThemeSwitcherAction } = useThemeSwitcher()\n\n  return (\n    <div className=\"app\">\n      <AppHeader />\n\n      <AppActions>\n        <AppAction\n          icon={mdiMagnify}\n          action={handleSearchAction}\n          active={mode === AppMode.search}\n        />\n        <AppAction\n          icon={themeSwitcherIcon}\n          action={handleThemeSwitcherAction}\n          active={false}\n        />\n        <AppAction\n          icon={mdiFormatListChecks}\n          action={handleCustomizeAction}\n          active={mode === AppMode.customize}\n        />\n      </AppActions>\n\n      {mode === AppMode.default || mode === AppMode.customize ? (\n        <AppContent>\n          <LinkList links={links.items} hiddenLinks={hiddenLinks.links} />\n        </AppContent>\n      ) : (\n        <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n      )}\n\n      <AppFooter>\n        <FooterGroup title={'WebdevHome v' + version}>\n          <FooterLink\n            text=\"Changelog\"\n            url=\"https://github.com/webdevhome/webdevhome.github.io/releases\"\n          />\n          <FooterLink\n            text=\"GitHub\"\n            url=\"https://github.com/webdevhome/webdevhome.github.io\"\n          />\n        </FooterGroup>\n\n        <FooterDivider />\n\n        <FooterGroup title=\"Icons\">\n          <FooterLink\n            text=\"Material Design Icons\"\n            url=\"https://materialdesignicons.com\"\n          />\n          <FooterLink text=\"Simple Icons\" url=\"https://simpleicons.org/\" />\n        </FooterGroup>\n      </AppFooter>\n    </div>\n  )\n}\n\n// #region customize feature\ninterface UseCustomizeModeReturn {\n  hiddenLinks: HiddenLinks\n  handleCustomizeAction: () => void\n}\n\nfunction useCustomizeMode(): UseCustomizeModeReturn {\n  const hiddenLinks = useHiddenLinks()\n  const { mode } = useCurrentMode()\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGlobalKeydown)\n\n    function handleGlobalKeydown(event: KeyboardEvent): void {\n      if (event.key === 'Escape' && mode === AppMode.customize) {\n        setMode(AppMode.default)\n      }\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleGlobalKeydown)\n    }\n  }, [mode])\n\n  const handleCustomizeAction = useCallback((): void => {\n    toggleMode(AppMode.customize)\n  }, [])\n\n  return { hiddenLinks, handleCustomizeAction }\n}\n// #endregion customize feature\n\n// #region search feature\ninterface UseSearchModeReturn {\n  handleSearchAction: () => void\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nfunction useSearchMode(): UseSearchModeReturn {\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  const { mode } = useCurrentMode()\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleGlobalKeypress)\n\n    function handleGlobalKeypress(event: KeyboardEvent): void {\n      if (mode === AppMode.default) {\n        if (event.key === '\\n') {\n          return\n        }\n        \n        setMode(AppMode.search)\n      }\n    }\n\n    return (): void => {\n      window.removeEventListener('keypress', handleGlobalKeypress)\n    }\n  }, [mode])\n\n  const handleSearchAction = useCallback((): void => {\n    setSearchTerm('')\n    toggleMode(AppMode.search)\n  }, [])\n\n  return { handleSearchAction, searchTerm, setSearchTerm }\n}\n// #endregion search feature\n\n// #region theme switcher\nexport const themeStates = ['auto', 'light', 'dark'] as const\nexport type ThemeState = typeof themeStates[number]\n\ninterface UseThemeSwitcherReturn {\n  themeSwitcherIcon: string\n  handleThemeSwitcherAction: () => void\n}\n\nfunction useThemeSwitcher(): UseThemeSwitcherReturn {\n  const [themeState, setThemeState] = useState<ThemeState>(\n    getThemeStateSetting()\n  )\n\n  const bodyElement = useMemo(\n    () => globalThis.document.getElementsByTagName('body')[0],\n    []\n  )\n\n  useEffect(() => {\n    setThemeStateSetting(themeState)\n    bodyElement.className = `${themeState}-theme`\n  }, [bodyElement.className, themeState])\n\n  const themeSwitcherIcon = useMemo((): string => {\n    if (themeState === 'light') {\n      return mdiWeatherSunny\n    }\n    if (themeState === 'dark') {\n      return mdiWeatherNight\n    }\n    return mdiThemeLightDark\n  }, [themeState])\n\n  const handleThemeSwitcherAction = useCallback((): void => {\n    switch (themeState) {\n      case 'light':\n        setThemeState('dark')\n        break\n      case 'dark':\n        setThemeState('auto')\n        break\n      default:\n        setThemeState('light')\n        break\n    }\n  }, [themeState])\n\n  return { themeSwitcherIcon, handleThemeSwitcherAction }\n}\n// #endregion theme switcher\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { WebdevHome } from './App'\nimport './sass/index.scss'\n\nReactDOM.render(<WebdevHome />, document.getElementById('root'))\n"],"sourceRoot":""}