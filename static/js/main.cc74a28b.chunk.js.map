{"version":3,"sources":["components/Footer/AppFooter.tsx","components/Footer/FooterDivider.tsx","components/Footer/FooterGroup.tsx","components/Footer/FooterLink.tsx","utils/jsx.ts","contexts/currentModeContext.ts","components/Icon/MdiIcon.tsx","components/Header/AppAction.tsx","components/Header/AppActions.tsx","components/Header/Logo.tsx","components/Header/AppHeader.tsx","components/Layout/AppContent.tsx","contexts/utils.ts","services/localStorage/localStorageService.ts","services/localStorage/migrations/v1.ts","contexts/hiddenLinksContext.ts","services/localStorage/values/hiddenLinks.ts","utils/misc.ts","components/Icon/DefaultIcon.tsx","components/Links/Link.tsx","components/Links/LinkGroup.tsx","links.ts","components/Search/SearchTargetItem.tsx","components/Search/Search.tsx","App.tsx","services/localStorage/values/themeSetting.ts","Contexts.tsx","index.tsx"],"names":["AppFooter","memo","children","className","FooterDivider","FooterGroup","title","FooterLink","text","url","href","classes","classesObject","result","Object","entries","push","join","AppMode","MdiIcon","path","color","Icon","style","width","height","AppAction","icon","action","active","actionClasses","useMemo","onClick","AppActions","Logo","AppHeader","AppContent","contextProviderWarning","Error","StorageKey","CurrentModeContext","createContext","currentMode","default","setCurrentMode","toggleMode","isCurrentMode","migrateToV1","themeSetting","localStorage","getItem","setStorageValue","removeItem","storageVersion","getStorageValue","key","fallback","value","setItem","removeStorageValue","currentVersion","migrations","v0","forEach","version","migration","migrateLocalStorage","LinkVisibilityAction","HiddenLinksContext","hiddenLinks","setLinks","toggleLink","toggleGroup","allLinksAreHidden","useHiddenLinksContextValue","useState","storageString","hiddenItems","storageValue","JSON","parse","Array","isArray","some","loadHiddenLinks","setHiddenLinks","updateHiddenLInks","links","values","stringify","saveHiddenLinks","urlToToggle","includes","filter","state","urls","linksToUnhide","linksToHide","link","newHiddenLinks","show","every","getIconUrl","process","REACT_APP_PUBLIC_URL","DefaultIcon","mdiLinkVariant","Link","searchable","customize","visible","focus","hiddenLinksContext","useContext","handleLinkClick","useCallback","event","preventDefault","linkClasses","rel","undefined","src","mdiEye","mdiEyeOff","LinkGroup","group","currentModeContext","linkGroupClasses","items","allGroupLinksAreHidden","handleToggleGroupClick","newState","hide","map","item","noVisibleLinksInGroup","name","mdiTableEyeOff","mdiTableEye","SearchTargetItem","getIcon","iconUrl","Search","searchTerm","setSearchTerm","keyboardIndex","setKeyboardIndex","searchTarget","setSearchTarget","visibleLinks","flatMap","fuzzyOptions","allowTypo","limit","results","fuzzy","go","focusedResult","useLayoutEffect","useSearch","useEffect","window","addEventListener","handleGlobalKeyDown","removeEventListener","handleInputChange","target","handleInputKeyDown","obj","searchUrl","focusedItem","concatChar","searchConcat","encodedSearchTerm","replace","getUrl","ctrlKey","open","location","shiftKey","Math","max","min","total","hints","resultElements","autoFocus","type","placeholder","onChange","onKeyDown","WebdevHome","customizeMode","handleGlobalKeydown","document","handleCustomizeAction","useCustomizeMode","searchMode","handleGlobalKeypress","search","handleSearchAction","useSearchMode","themeSwitcher","loadThemeSetting","themeState","setThemeState","bodyElement","globalThis","getElementsByTagName","mdiWeatherSunny","mdiWeatherNight","mdiThemeLightDark","switchTheme","useThemeSwitcher","mdiMagnify","mdiFormatListChecks","Contexts","currentModeContextValue","mode","modes","useCurrentModeContextValue","hiddenLinksContextValue","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cc74a28b.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport './AppFooter.scss'\n\nexport const AppFooter = memo(function AppFooter({ children }) {\n  return <div className=\"app-footer\">{children}</div>\n})\n","import React, { memo } from 'react'\nimport './FooterDivider.scss'\n\nexport const FooterDivider = memo(function FooterDivider() {\n  return <div className=\"footer-divider\"></div>\n})\n","import React, { memo, PropsWithChildren } from 'react'\nimport './FooterGroup.scss'\n\ninterface Props {\n  title: string\n}\n\nexport const FooterGroup = memo<PropsWithChildren<Props>>(function FooterGroup({\n  children,\n  title,\n}) {\n  return (\n    <div className=\"footer-group\">\n      <div className=\"footer-group__title\">{title}</div>\n      {children}\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './FooterLink.scss'\n\ninterface Props {\n  text: string\n  url: string\n}\n\nexport const FooterLink = memo<Props>(function FooterLink({ text, url }) {\n  return (\n    <a href={url} className=\"footer-link\">\n      {text}\n    </a>\n  )\n})\n","export function classes(classesObject: Record<string, boolean>): string {\n  const result: string[] = []\n\n  for (const [className, condition] of Object.entries(classesObject)) {\n    if (condition === true) {\n      result.push(className)\n    }\n  }\n\n  return result.join(' ')\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react'\nimport { contextProviderWarning } from './utils'\n\nexport enum AppMode {\n  default,\n  search,\n  customize,\n}\n\nexport interface CurrentModeContextValue {\n  currentMode: AppMode\n  setCurrentMode: Dispatch<SetStateAction<AppMode>>\n  toggleMode: (mode: AppMode) => void\n  isCurrentMode: (...modes: AppMode[]) => boolean\n}\n\nexport const CurrentModeContext = createContext<CurrentModeContextValue>({\n  currentMode: AppMode.default,\n  setCurrentMode: contextProviderWarning,\n  toggleMode: contextProviderWarning,\n  isCurrentMode: contextProviderWarning,\n})\n\nexport function useCurrentModeContextValue(): CurrentModeContextValue {\n  const [currentMode, setCurrentMode] = useState<AppMode>(AppMode.default)\n\n  function toggleMode(mode: AppMode): void {\n    setCurrentMode(mode === currentMode ? AppMode.default : mode)\n  }\n\n  function isCurrentMode(...modes: AppMode[]): boolean {\n    return modes.includes(currentMode)\n  }\n\n  return {\n    currentMode,\n    setCurrentMode,\n    toggleMode,\n    isCurrentMode,\n  }\n}\n","import { Icon } from '@mdi/react'\nimport React, { memo } from 'react'\n\ninterface Props {\n  path: string\n  className?: string\n  color?: string\n}\n\nexport const MdiIcon = memo<Props>(function MdiIcon({ path, color }) {\n  return <Icon style={{ width: 24, height: 24 }} path={path} color={color} />\n})\n","import React, { memo, useMemo } from 'react'\nimport { classes } from '../../utils/jsx'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport './AppAction.scss'\n\ninterface Props {\n  icon: string\n  active: boolean\n  action: () => void\n}\n\nexport const AppAction = memo<Props>(function AppAction({\n  icon,\n  action,\n  active,\n}) {\n  const actionClasses = useMemo(\n    () => ({\n      'app-action': true,\n      'app-action--is-active': active,\n    }),\n    [active]\n  )\n\n  return (\n    <div className={classes(actionClasses)} onClick={action}>\n      <MdiIcon path={icon} />\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppActions.scss'\n\nexport const AppActions = memo(function AppActions({ children }) {\n  return <div className=\"app-actions\">{children}</div>\n})\n","import React, { memo } from 'react'\nimport './Logo.scss'\n\nexport const Logo = memo(function Logo() {\n  return (\n    <div className=\"logo\">\n      <span className=\"logo__shape\">&lt;</span>\n      <span className=\"logo__char-1\">Webdev</span>\n      <span className=\"logo__char-2\">Home</span>\n      <span className=\"logo__shape\"> /&gt;</span>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppHeader.scss'\nimport { Logo } from './Logo'\n\nexport const AppHeader = memo(function AppHeader() {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header__logo\">\n        <Logo />\n      </div>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport './AppContent.scss'\n\nexport const AppContent = memo(function AppContent({ children }) {\n  return <div className=\"app-content\">{children}</div>\n})\n","export function contextProviderWarning(): never {\n  throw Error('Please use the context provider.')\n}\n","import { migrateToV1 } from './migrations/v1'\n\nexport enum StorageKey {\n  storageVersion = 'wdh:storage-version',\n  hiddenItems = 'wdh:hidden-items',\n  themeSetting = 'wdh:theme-setting',\n}\n\nexport function getStorageValue(key: StorageKey): string | null\nexport function getStorageValue(key: StorageKey, fallback: string): string\nexport function getStorageValue(\n  key: StorageKey,\n  fallback?: string\n): string | null {\n  return localStorage.getItem(key) ?? fallback ?? null\n}\n\nexport function setStorageValue(key: StorageKey, value: string): void {\n  localStorage.setItem(key, value)\n}\n\nexport function removeStorageValue(key: StorageKey): void {\n  localStorage.removeItem(key)\n}\n\nmigrateLocalStorage()\n\nfunction migrateLocalStorage(): void {\n  const currentVersion = getStorageValue(StorageKey.storageVersion, 'v0')\n\n  const migrations = {\n    v0: migrateToV1,\n  }\n\n  Object.entries(migrations).forEach(([version, migration]) => {\n    if (currentVersion !== version) return\n    migration()\n  })\n}\n","import { setStorageValue, StorageKey } from '../localStorageService'\n\nexport function migrateToV1(): void {\n  const wrongThemeSettingKey = 'sdh:theme-setting'\n  const themeSetting = localStorage.getItem(wrongThemeSettingKey)\n\n  if (themeSetting !== null) {\n    setStorageValue(StorageKey.themeSetting, themeSetting)\n    localStorage.removeItem(wrongThemeSettingKey)\n  }\n\n  setStorageValue(StorageKey.storageVersion, 'v1')\n}\n","import { createContext, Dispatch, SetStateAction, useState } from 'react'\nimport { LinkItem } from '../links'\nimport {\n  loadHiddenLinks, saveHiddenLinks\n} from '../services/localStorage/values/hiddenLinks'\nimport { contextProviderWarning } from './utils'\n\nexport interface HiddenLinksContextValue {\n  hiddenLinks: string[]\n  setLinks: Dispatch<SetStateAction<string[]>>\n  toggleLink: (url: string) => void\n  toggleGroup: (\n    state: LinkVisibilityAction,\n    ...urls: Array<LinkItem['url']>\n  ) => void\n  allLinksAreHidden: (...links: LinkItem[]) => boolean\n}\n\nexport const HiddenLinksContext = createContext<HiddenLinksContextValue>({\n  hiddenLinks: [],\n  setLinks: contextProviderWarning,\n  toggleLink: contextProviderWarning,\n  toggleGroup: contextProviderWarning,\n  allLinksAreHidden: contextProviderWarning,\n})\n\nexport enum LinkVisibilityAction {\n  show,\n  hide,\n}\n\nexport function useHiddenLinksContextValue(): HiddenLinksContextValue {\n  const [hiddenLinks, setHiddenLinks] = useState<string[]>(loadHiddenLinks())\n\n  function updateHiddenLInks(links:Array<LinkItem['url']>):void{\n    setHiddenLinks(links)\n    saveHiddenLinks(links)\n  }\n\n  function toggleLink(urlToToggle: LinkItem['url']): void {\n    const linkToUnhide = (url: string): boolean => url !== urlToToggle\n    const newHiddenLinks = hiddenLinks.includes(urlToToggle)\n      ? hiddenLinks.filter(linkToUnhide)\n      : [...hiddenLinks, urlToToggle]\n\n    updateHiddenLInks(newHiddenLinks)\n  }\n\n  function toggleGroup(\n    state: LinkVisibilityAction,\n    ...urls: Array<LinkItem['url']>\n  ): void {\n    const linksToUnhide = (url: string): boolean => !urls.includes(url)\n    const linksToHide = (link: string): boolean => !hiddenLinks.includes(link)\n    const newHiddenLinks =\n      state === LinkVisibilityAction.show\n        ? hiddenLinks.filter(linksToUnhide)\n        : [...hiddenLinks, ...urls.filter(linksToHide)]\n\n    updateHiddenLInks(newHiddenLinks)\n  }\n\n  function allLinksAreHidden(...links: LinkItem[]): boolean {\n    return links.every((link) => hiddenLinks.includes(link.url))\n  }\n\n  return { hiddenLinks, setLinks: setHiddenLinks, toggleLink, toggleGroup, allLinksAreHidden }\n}\n","import {\n  getStorageValue,\n  removeStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadHiddenLinks(): string[] {\n  const storageString = getStorageValue(StorageKey.hiddenItems)\n\n  if (storageString === null) {\n    return []\n  }\n\n  try {\n    const storageValue = JSON.parse(storageString)\n\n    if (!Array.isArray(storageValue)) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    if (storageValue.some((value) => typeof value !== 'string')) {\n      removeStorageValue(StorageKey.hiddenItems)\n      return []\n    }\n\n    return storageValue\n  } catch {\n    removeStorageValue(StorageKey.hiddenItems)\n    return []\n  }\n}\n\nexport function saveHiddenLinks(values: string[]): void {\n  try {\n    const storageString = JSON.stringify(values)\n    setStorageValue(StorageKey.hiddenItems, storageString)\n  } catch {\n    throw new Error('[setHiddenLinks()] Values cannot be serialized to JSON.')\n  }\n}\n","export function getIconUrl(icon: string): string {\n  return `${process.env.REACT_APP_PUBLIC_URL ?? ''}/simple-icons/${icon}.svg`\n}\n","import { mdiLinkVariant } from '@mdi/js'\nimport React, { memo } from 'react'\nimport { MdiIcon } from './MdiIcon'\n\nexport const DefaultIcon = memo(function DefaultIcon() {\n  return (\n    <div className=\"default-icon\">\n      <MdiIcon path={mdiLinkVariant} color=\"#eee\" />\n    </div>\n  )\n})\n","import { mdiEye, mdiEyeOff } from '@mdi/js'\nimport React, {\n  memo,\n  MouseEvent,\n  useCallback,\n  useContext,\n  useMemo\n} from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { HiddenLinksContext } from '../../contexts/hiddenLinksContext'\nimport { classes } from '../../utils/jsx'\nimport { getIconUrl } from '../../utils/misc'\nimport { DefaultIcon } from '../Icon/DefaultIcon'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport './Link.scss'\n\ninterface Props {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  searchable?: boolean\n  customize?: boolean\n  visible?: boolean\n  focus?: boolean\n}\n\nexport const Link = memo<Props>(function Link({\n  title,\n  url,\n  icon,\n  color,\n  searchable = false,\n  customize = false,\n  visible = true,\n  focus = false,\n}) {\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n  const handleLinkClick = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>): void => {\n      if (!customize) return\n\n      event.preventDefault()\n      hiddenLinksContext.toggleLink(url)\n    },\n    [customize, hiddenLinksContext, url]\n  )\n\n  const linkClasses = useMemo(\n    () =>\n      classes({\n        link: true,\n        'link--is-visible': visible,\n        'link--has-focus': focus,\n        'link--customize-mode': customize,\n      }),\n    [customize, focus, visible]\n  )\n\n  if (!customize && !visible) {\n    return null\n  }\n\n  return (\n    <a\n      href={url}\n      rel=\"noreferrer\"\n      className={linkClasses}\n      onClick={handleLinkClick}\n    >\n      <div className=\"link__icon-container\" style={{ color }}>\n        {icon !== undefined ? (\n          <ReactSVG src={getIconUrl(icon)} className=\"link__icon\" />\n        ) : (\n          <DefaultIcon />\n        )}\n      </div>\n\n      <div className=\"link__label\">{title}</div>\n\n      {searchable ? (\n        <div className=\"link__info\">\n          <span className=\"link__info-text\">\n            <kbd>Tab</kbd>: Search on site\n          </span>\n        </div>\n      ) : null}\n\n      {customize ? (\n        <div className=\"link__action\">\n          <MdiIcon path={visible ? mdiEye : mdiEyeOff} />\n        </div>\n      ) : null}\n    </a>\n  )\n})\n","import { mdiTableEye, mdiTableEyeOff } from '@mdi/js'\nimport React, { memo, useCallback, useContext, useMemo } from 'react'\nimport { AppMode, CurrentModeContext } from '../../contexts/currentModeContext'\nimport {\n  HiddenLinksContext,\n  LinkVisibilityAction\n} from '../../contexts/hiddenLinksContext'\nimport { LinkGroup as ILinkGroup, LinkItem } from '../../links'\nimport { classes } from '../../utils/jsx'\nimport { MdiIcon } from '../Icon/MdiIcon'\nimport { Link } from './Link'\nimport './LinkGroup.scss'\n\ninterface Props {\n  group: ILinkGroup\n}\n\nexport const LinkGroup = memo<Props>(function LinkGroup({ group }) {\n  const currentModeContext = useContext(CurrentModeContext)\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n\n  const linkGroupClasses = useMemo(() => {\n    return classes({\n      'link-group': true,\n      'link-group--is-visible':\n        !hiddenLinksContext?.allLinksAreHidden(...group.items) ?? false,\n    })\n  }, [group.items, hiddenLinksContext])\n\n  const allGroupLinksAreHidden = useCallback(\n    (items: LinkItem[]): boolean => {\n      const { allLinksAreHidden } = hiddenLinksContext\n      return allLinksAreHidden(...items)\n    },\n    [hiddenLinksContext]\n  )\n\n  const handleToggleGroupClick = useCallback(\n    (...items: LinkItem[]): void => {\n      const { toggleGroup, allLinksAreHidden } = hiddenLinksContext\n      const newState: LinkVisibilityAction = allLinksAreHidden(...items)\n        ? LinkVisibilityAction.show\n        : LinkVisibilityAction.hide\n      toggleGroup(newState, ...items.map((item) => item.url))\n    },\n    [hiddenLinksContext]\n  )\n\n  const noVisibleLinksInGroup = useMemo(() => {\n    const { allLinksAreHidden } = hiddenLinksContext\n    return allLinksAreHidden(...group.items)\n  }, [group.items, hiddenLinksContext])\n\n  const { isCurrentMode } = currentModeContext\n  const { hiddenLinks } = hiddenLinksContext\n\n  if (noVisibleLinksInGroup && !isCurrentMode(AppMode.customize)) return null\n\n  return (\n    <div className={linkGroupClasses}>\n      <div className=\"link-group__header\">\n        <div className=\"link-group__name\">{group.name}</div>\n\n        {isCurrentMode(AppMode.customize) ? (\n          <div\n            className=\"link-group__action\"\n            onClick={() => handleToggleGroupClick(...group.items)}\n          >\n            {allGroupLinksAreHidden(group.items) ? (\n              <MdiIcon path={mdiTableEyeOff} />\n            ) : (\n              <MdiIcon path={mdiTableEye} />\n            )}\n          </div>\n        ) : null}\n      </div>\n      <div className=\"link-group__list\">\n        {group.items.map((link) => (\n          <Link\n            key={link.url}\n            title={link.title}\n            url={link.url}\n            icon={link.icon}\n            color={link.color}\n            customize={isCurrentMode(AppMode.customize)}\n            visible={!hiddenLinks.includes(link.url)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n})\n","import linksData from './links.json'\nimport { OptionalExceptFor } from './utilityTypes'\n\nexport interface LinkItem {\n  title: string\n  url: string\n  icon?: string\n  color?: string\n  iconComp?: JSX.Element\n  searchUrl?: string\n  searchConcat?: string\n}\n\nexport type SearchTarget = OptionalExceptFor<\n  LinkItem,\n  'title' | 'url' | 'searchUrl'\n>\n\nexport interface LinkGroup {\n  name: string\n  items: LinkItem[]\n}\n\nexport interface Links {\n  items: LinkGroup[]\n}\n\nexport const links: Links = {\n  items: linksData.items,\n}\n\nexport function getAllLinks(): LinkItem[] {\n  return links.items.flatMap((group) => group.items)\n}\n","import React, { memo, useCallback } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { LinkItem } from '../../links'\nimport { getIconUrl } from '../../utils/misc'\nimport './SearchTargetItem.scss'\n\ninterface Props {\n  title: LinkItem['title']\n  icon: LinkItem['icon']\n  color: LinkItem['color']\n}\n\nexport const SearchTargetItem = memo<Props>(function SearchTargetItem({\n  title,\n  icon,\n  color,\n}) {\n  const getIcon = useCallback(() => {\n    if (icon === undefined) {\n      return null\n    }\n\n    const iconUrl = getIconUrl(icon)\n\n    return (\n      <span className=\"search-target-item__icon-container\" style={{ color }}>\n        <ReactSVG src={iconUrl} className=\"search-target-item__icon\" />\n      </span>\n    )\n  }, [color, icon])\n\n  return (\n    <div className=\"search-target-item\">\n      Search on {getIcon()} {title}:\n    </div>\n  )\n})\n","import fuzzy from 'fuzzysort'\nimport React, {\n  ChangeEvent,\n  Dispatch,\n  KeyboardEvent as ReactKeyboardEvent,\n  memo,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { AppMode, CurrentModeContext } from '../../contexts/currentModeContext'\nimport { HiddenLinksContext } from '../../contexts/hiddenLinksContext'\nimport { getAllLinks, LinkItem, SearchTarget } from '../../links'\nimport { Link } from '../Links/Link'\nimport './Search.scss'\nimport { SearchTargetItem } from './SearchTargetItem'\n\ninterface Props {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nexport const Search = memo<Props>(function Search({\n  searchTerm,\n  setSearchTerm,\n}) {\n  const {\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  } = useSearch(searchTerm, setSearchTerm)\n\n  const currentModeContext = useContext(CurrentModeContext)\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown)\n\n    return () => {\n      window.removeEventListener('keydown', handleGlobalKeyDown)\n    }\n  })\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void => {\n      setSearchTerm(event.target.value)\n      setKeyboardIndex(0)\n    },\n    [setKeyboardIndex, setSearchTerm]\n  )\n\n  const handleInputKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLInputElement>): void => {\n      switch (event.key) {\n        case 'Backspace': {\n          if (searchTerm !== '') return\n\n          if (searchTarget !== null) {\n            setSearchTarget(null)\n          } else {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'Tab': {\n          event.preventDefault()\n\n          if (searchTarget !== null) return\n          if (focusedResult === null) return\n          if (focusedResult.obj.searchUrl === undefined) return\n\n          setSearchTarget(focusedResult.obj as SearchTarget)\n          setSearchTerm('')\n          break\n        }\n\n        case 'Enter': {\n          const url = getUrl(\n            focusedResult?.obj ?? null,\n            searchTarget,\n            searchTerm\n          )\n\n          if (url === null) return\n\n          if (event.ctrlKey) {\n            window.open(url, '', 'alwaysRaised=on')\n          } else {\n            window.location.href = url\n          }\n\n          if (event.ctrlKey || event.shiftKey) {\n            currentModeContext?.setCurrentMode(AppMode.default)\n          }\n          break\n        }\n\n        case 'ArrowUp': {\n          if (results === null) return\n\n          event.preventDefault()\n          setKeyboardIndex(Math.max(0, keyboardIndex - 1))\n          break\n        }\n\n        case 'ArrowDown': {\n          if (results === null) return\n\n          event.preventDefault()\n          setKeyboardIndex(Math.min(results.total - 1, keyboardIndex + 1))\n        }\n      }\n    },\n    [\n      currentModeContext,\n      focusedResult,\n      keyboardIndex,\n      results,\n      searchTarget,\n      searchTerm,\n      setKeyboardIndex,\n      setSearchTarget,\n      setSearchTerm,\n    ]\n  )\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (searchTarget !== null) {\n          setSearchTarget(null)\n          setSearchTerm('')\n          return\n        }\n\n        currentModeContext?.setCurrentMode(AppMode.default)\n      }\n    },\n    [currentModeContext, searchTarget, setSearchTarget, setSearchTerm]\n  )\n\n  const hints = useMemo(\n    () => (\n      <>\n        <div className=\"search__results-hint\">Type ahead to filter links.</div>\n        <div className=\"search__results-hint\">\n          <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">Open link</div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (background)\n          </div>\n        </div>\n        <div className=\"search__results-hint\">\n          <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Return</kbd>\n          <div className=\"search__results-hint-description\">\n            Open link in a new tab (foreground)\n          </div>\n        </div>\n      </>\n    ),\n    []\n  )\n\n  const resultElements = useMemo(\n    () => (\n      <>\n        {results !== null && results.total > 0 ? (\n          results.map((link) => (\n            <Link\n              key={link.obj.url}\n              title={link.obj.title}\n              url={link.obj.url}\n              icon={link.obj.icon}\n              searchable={link.obj.searchUrl !== undefined}\n              color={link.obj.color}\n              customize={false}\n              visible={true}\n              focus={link === focusedResult}\n            />\n          ))\n        ) : (\n          <div className=\"search__results-hint\">No results found...</div>\n        )}\n      </>\n    ),\n    [focusedResult, results]\n  )\n\n  return (\n    <div className=\"search\">\n      {searchTarget !== null ? (\n        <SearchTargetItem\n          title={searchTarget.title}\n          icon={searchTarget.icon}\n          color={searchTarget.color}\n        />\n      ) : null}\n\n      <input\n        className=\"search__input\"\n        autoFocus\n        type=\"text\"\n        value={searchTerm}\n        placeholder={searchTarget === null ? 'Search links...' : 'Search...'}\n        onChange={handleInputChange}\n        onKeyDown={handleInputKeyDown}\n      />\n\n      <div className=\"search__results\">\n        {searchTarget === null\n          ? searchTerm === ''\n            ? hints\n            : resultElements\n          : null}\n      </div>\n    </div>\n  )\n})\n\ninterface UseSearchReturn {\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n  searchTarget: SearchTarget | null\n  setSearchTarget: Dispatch<SetStateAction<SearchTarget | null>>\n  keyboardIndex: number\n  setKeyboardIndex: Dispatch<SetStateAction<number>>\n  results: Fuzzysort.KeyResults<LinkItem> | null\n  focusedResult: Fuzzysort.KeyResult<LinkItem> | null\n}\n\nfunction useSearch(\n  searchTerm: string,\n  setSearchTerm: Dispatch<SetStateAction<string>>\n): UseSearchReturn {\n  const [keyboardIndex, setKeyboardIndex] = useState<number>(0)\n  const [searchTarget, setSearchTarget] = useState<SearchTarget | null>(null)\n  const hiddenLinksContext = useContext(HiddenLinksContext)\n\n  const visibleLinks = useMemo(() => {\n    return getAllLinks().filter(\n      (link) => !hiddenLinksContext.hiddenLinks.includes(link.url)\n    )\n  }, [hiddenLinksContext])\n\n  const fuzzyOptions: Fuzzysort.KeyOptions = useMemo(() => {\n    return { key: 'title', allowTypo: false, limit: 6 }\n  }, [])\n\n  const results = useMemo(() => {\n    if (visibleLinks === null) return null\n    if (searchTerm === '') return null\n    if (searchTarget !== null) return null\n\n    return fuzzy.go(searchTerm, visibleLinks, fuzzyOptions)\n  }, [fuzzyOptions, searchTarget, searchTerm, visibleLinks])\n\n  const focusedResult = useMemo(() => {\n    return results?.[keyboardIndex] ?? null\n  }, [keyboardIndex, results])\n\n  useLayoutEffect(() => {\n    setSearchTerm('')\n    return () => {\n      setSearchTerm('')\n    }\n  }, [setSearchTerm])\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchTarget,\n    setSearchTarget,\n    keyboardIndex,\n    setKeyboardIndex,\n    results,\n    focusedResult,\n  }\n}\n\nfunction getUrl(\n  focusedItem: LinkItem | null,\n  searchTarget?: SearchTarget | null,\n  searchTerm?: string\n): string | null {\n  if (\n    searchTarget !== null &&\n    searchTarget !== undefined &&\n    searchTerm !== undefined &&\n    searchTerm !== ''\n  ) {\n    const concatChar = searchTarget.searchConcat ?? '+'\n    const encodedSearchTerm = searchTerm.replace(/ /g, concatChar)\n    return searchTarget.searchUrl.replace(/\\{search\\}/, encodedSearchTerm)\n  }\n\n  return focusedItem !== null ? focusedItem.url : null\n}\n","import {\n  mdiFormatListChecks,\n  mdiMagnify,\n  mdiThemeLightDark,\n  mdiWeatherNight,\n  mdiWeatherSunny\n} from '@mdi/js'\nimport React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { version } from '../package.json'\nimport './App.scss'\nimport { AppFooter } from './components/Footer/AppFooter'\nimport { FooterDivider } from './components/Footer/FooterDivider'\nimport { FooterGroup } from './components/Footer/FooterGroup'\nimport { FooterLink } from './components/Footer/FooterLink'\nimport { AppAction } from './components/Header/AppAction'\nimport { AppActions } from './components/Header/AppActions'\nimport { AppHeader } from './components/Header/AppHeader'\nimport { AppContent } from './components/Layout/AppContent'\nimport { LinkGroup } from './components/Links/LinkGroup'\nimport { Search } from './components/Search/Search'\nimport {\n  AppMode,\n  CurrentModeContext\n} from './contexts/currentModeContext'\nimport { links } from './links'\nimport {\n  loadThemeSetting,\n  saveThemeSetting\n} from './services/localStorage/values/themeSetting'\n\nexport const WebdevHome: FC = () => {\n  const customizeMode = useCustomizeMode()\n  const searchMode = useSearchMode()\n  const themeSwitcher = useThemeSwitcher()\n\n  const { isCurrentMode } = useContext(CurrentModeContext)\n\n  return (\n    <div className=\"app\">\n      <AppHeader />\n\n      <AppActions>\n        <AppAction\n          icon={mdiMagnify}\n          action={searchMode.handleSearchAction}\n          active={isCurrentMode(AppMode.search)}\n        />\n        <AppAction\n          icon={themeSwitcher.icon}\n          action={themeSwitcher.switchTheme}\n          active={false}\n        />\n        <AppAction\n          icon={mdiFormatListChecks}\n          action={customizeMode.handleCustomizeAction}\n          active={isCurrentMode(AppMode.customize)}\n        />\n      </AppActions>\n\n      {isCurrentMode(AppMode.default, AppMode.customize) ? (\n        <AppContent>\n          {links.items.map((group) => (\n            <LinkGroup group={group} key={group.name} />\n          ))}\n        </AppContent>\n      ) : (\n        <Search\n          searchTerm={searchMode.searchTerm}\n          setSearchTerm={searchMode.setSearchTerm}\n        />\n      )}\n\n      <AppFooter>\n        <FooterGroup title={'WebdevHome v' + version}>\n          <FooterLink\n            text=\"Changelog\"\n            url=\"https://github.com/webdevhome/webdevhome.github.io/releases\"\n          />\n          <FooterLink\n            text=\"GitHub\"\n            url=\"https://github.com/webdevhome/webdevhome.github.io\"\n          />\n        </FooterGroup>\n\n        <FooterDivider />\n\n        <FooterGroup title=\"Icons\">\n          <FooterLink\n            text=\"Material Design Icons\"\n            url=\"https://materialdesignicons.com\"\n          />\n          <FooterLink text=\"Simple Icons\" url=\"https://simpleicons.org/\" />\n        </FooterGroup>\n      </AppFooter>\n    </div>\n  )\n}\n\n// #region customize feature\ninterface UseCustomizeModeReturn {\n  handleCustomizeAction: () => void\n}\n\nfunction useCustomizeMode(): UseCustomizeModeReturn {\n  const { isCurrentMode, setCurrentMode, toggleMode } = useContext(\n    CurrentModeContext\n  )\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleGlobalKeydown)\n\n    function handleGlobalKeydown(event: KeyboardEvent): void {\n      if (event.key === 'Escape' && isCurrentMode(AppMode.customize)) {\n        setCurrentMode(AppMode.default)\n      }\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleGlobalKeydown)\n    }\n  }, [isCurrentMode, setCurrentMode])\n\n  const handleCustomizeAction = useCallback((): void => {\n    toggleMode(AppMode.customize)\n  }, [toggleMode])\n\n  return { handleCustomizeAction }\n}\n// #endregion customize feature\n\n// #region search feature\ninterface UseSearchModeReturn {\n  handleSearchAction: () => void\n  searchTerm: string\n  setSearchTerm: Dispatch<SetStateAction<string>>\n}\n\nfunction useSearchMode(): UseSearchModeReturn {\n  const [searchTerm, setSearchTerm] = useState<string>('')\n\n  const { isCurrentMode, setCurrentMode, toggleMode } = useContext(\n    CurrentModeContext\n  )\n\n  const handleGlobalKeypress = useCallback(\n    (event: KeyboardEvent) => {\n      if (isCurrentMode(AppMode.default)) {\n        if (event.key === '\\n') return\n\n        setSearchTerm(event.key)\n        setCurrentMode(AppMode.search)\n      }\n    },\n    [isCurrentMode, setCurrentMode]\n  )\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleGlobalKeypress)\n\n    return () => {\n      window.removeEventListener('keypress', handleGlobalKeypress)\n    }\n  }, [handleGlobalKeypress, isCurrentMode, setCurrentMode])\n\n  const handleSearchAction = useCallback((): void => {\n    setSearchTerm('')\n    toggleMode(AppMode.search)\n  }, [toggleMode])\n\n  return { handleSearchAction, searchTerm, setSearchTerm }\n}\n// #endregion search feature\n\n// #region theme switcher\nexport const themeStates = ['auto', 'light', 'dark'] as const\nexport type ThemeState = typeof themeStates[number]\n\ninterface UseThemeSwitcherReturn {\n  icon: string\n  switchTheme: () => void\n}\n\nfunction useThemeSwitcher(): UseThemeSwitcherReturn {\n  const [themeState, setThemeState] = useState<ThemeState>(loadThemeSetting())\n\n  const bodyElement = useMemo(\n    () => globalThis.document.getElementsByTagName('body')[0],\n    []\n  )\n\n  useEffect(() => {\n    saveThemeSetting(themeState)\n    bodyElement.className = `${themeState}-theme`\n  }, [bodyElement.className, themeState])\n\n  const icon = useMemo((): string => {\n    if (themeState === 'light') return mdiWeatherSunny\n    if (themeState === 'dark') return mdiWeatherNight\n    return mdiThemeLightDark\n  }, [themeState])\n\n  const switchTheme = useCallback((): void => {\n    switch (themeState) {\n      case 'light': {\n        setThemeState('dark')\n        break\n      }\n      case 'dark': {\n        setThemeState('auto')\n        break\n      }\n      default: {\n        setThemeState('light')\n        break\n      }\n    }\n  }, [themeState])\n\n  return { icon, switchTheme }\n}\n// #endregion theme switcher\n","import { ThemeState } from '../../../App'\nimport {\n  getStorageValue,\n  setStorageValue,\n  StorageKey\n} from '../localStorageService'\n\nexport function loadThemeSetting(): ThemeState {\n  const value = getStorageValue(StorageKey.themeSetting)\n\n  if (value === null) return 'auto'\n  if (value !== 'auto' && value !== 'light' && value !== 'dark') return 'auto'\n\n  return value\n}\n\nexport function saveThemeSetting(value: ThemeState): void {\n  setStorageValue(StorageKey.themeSetting, value)\n}\n","import React, { memo, ReactNode } from 'react'\nimport {\n  CurrentModeContext,\n  useCurrentModeContextValue\n} from './contexts/currentModeContext'\nimport {\n  HiddenLinksContext,\n  useHiddenLinksContextValue\n} from './contexts/hiddenLinksContext'\n\ninterface Props {\n  children?: ReactNode\n}\n\nexport const Contexts = memo<Props>(function Contexts({ children }) {\n  const currentModeContextValue = useCurrentModeContextValue()\n  const hiddenLinksContextValue = useHiddenLinksContextValue()\n\n  return (\n    <CurrentModeContext.Provider value={currentModeContextValue}>\n      <HiddenLinksContext.Provider value={hiddenLinksContextValue}>\n        {children}\n      </HiddenLinksContext.Provider>\n    </CurrentModeContext.Provider>\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { WebdevHome } from './App'\nimport { Contexts } from './Contexts'\nimport './index.scss'\n\nReactDOM.render(\n  <Contexts>\n    <WebdevHome />\n  </Contexts>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}